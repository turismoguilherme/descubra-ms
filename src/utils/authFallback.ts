/**
 * Sistema de Fallback para Autentica√ß√£o
 * Fornece alternativas quando a autentica√ß√£o falha
 */

export interface AuthFallbackOptions {
  maxRetries: number;
  retryDelay: number;
  fallbackToGuest: boolean;
}

export class AuthFallback {
  private static instance: AuthFallback;
  private retryCount = 0;
  private options: AuthFallbackOptions = {
    maxRetries: 3,
    retryDelay: 2000,
    fallbackToGuest: true
  };

  static getInstance(): AuthFallback {
    if (!AuthFallback.instance) {
      AuthFallback.instance = new AuthFallback();
    }
    return AuthFallback.instance;
  }

  /**
   * Verifica se deve usar fallback
   */
  shouldUseFallback(authLoading: boolean, user: any): boolean {
    // Se est√° carregando h√° muito tempo ou n√£o h√° usu√°rio
    return authLoading || !user;
  }

  /**
   * Cria um usu√°rio convidado tempor√°rio
   */
  createGuestUser() {
    return {
      id: 'guest-' + Date.now(),
      email: 'guest@descubrams.com.br',
      created_at: new Date().toISOString(),
      isGuest: true
    };
  }

  /**
   * Verifica se o usu√°rio √© convidado
   */
  isGuestUser(user: any): boolean {
    return user?.isGuest === true;
  }

  /**
   * Tenta recuperar a autentica√ß√£o
   */
  async tryRecoverAuth(): Promise<boolean> {
    try {
      // Verificar se h√° dados de autentica√ß√£o no localStorage
      const authData = localStorage.getItem('supabase.auth.token');
      const userData = localStorage.getItem('test-user-data');
      
      if (authData || userData) {
        console.log('üîÑ AUTH FALLBACK: Dados de autentica√ß√£o encontrados, tentando recuperar...');
        return true;
      }
      
      return false;
    } catch (error) {
      console.error('‚ùå AUTH FALLBACK: Erro ao tentar recuperar autentica√ß√£o:', error);
      return false;
    }
  }

  /**
   * Executa o fallback
   */
  async executeFallback(): Promise<any> {
    this.retryCount++;
    
    if (this.retryCount > this.options.maxRetries) {
      console.warn('‚ö†Ô∏è AUTH FALLBACK: M√°ximo de tentativas atingido');
      return this.options.fallbackToGuest ? this.createGuestUser() : null;
    }

    // Tentar recuperar autentica√ß√£o
    const recovered = await this.tryRecoverAuth();
    if (recovered) {
      console.log('‚úÖ AUTH FALLBACK: Autentica√ß√£o recuperada');
      return null; // Deixar o sistema normal continuar
    }

    // Aguardar antes da pr√≥xima tentativa
    await new Promise(resolve => setTimeout(resolve, this.options.retryDelay));
    
    return this.executeFallback();
  }

  /**
   * Reset do contador de tentativas
   */
  reset() {
    this.retryCount = 0;
  }
}

// Inst√¢ncia global
export const authFallback = AuthFallback.getInstance();




