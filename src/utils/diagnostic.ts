// Utilit√°rio de diagn√≥stico para identificar problemas na aplica√ß√£o

export const runDiagnostics = () => {
  console.log("üîç Iniciando diagn√≥stico da aplica√ß√£o...");
  
  // Verificar vari√°veis de ambiente
  console.log("üìã Vari√°veis de ambiente:");
  console.log("- VITE_SUPABASE_URL:", import.meta.env.VITE_SUPABASE_URL);
  console.log("- VITE_SUPABASE_KEY:", import.meta.env.VITE_SUPABASE_KEY ? "Configurada" : "N√£o configurada");
  console.log("- NODE_ENV:", import.meta.env.NODE_ENV);
  console.log("- DEV:", import.meta.env.DEV);
  
  // Verificar se o DOM est√° dispon√≠vel
  console.log("üåê DOM dispon√≠vel:", typeof document !== "undefined");
  console.log("üîß Window dispon√≠vel:", typeof window !== "undefined");
  
// Verificar se React est√° dispon√≠vel
  console.log("‚öõÔ∏è React dispon√≠vel:", typeof window !== "undefined" && "React" in window);
  
  // Verificar se o elemento root existe
  const rootElement = document.getElementById('root');
  console.log("üéØ Elemento root encontrado:", !!rootElement);
  
  // Verificar se h√° erros no console
  const originalError = console.error;
  const originalWarn = console.warn;
  
  const errors: string[] = [];
  const warnings: string[] = [];
  
  console.error = (...args) => {
    errors.push(args.join(' '));
    originalError.apply(console, args);
  };
  
  console.warn = (...args) => {
    warnings.push(args.join(' '));
    originalWarn.apply(console, args);
  };
  
  // Retornar fun√ß√£o para obter resultados
  return {
    getResults: () => ({
      errors,
      warnings,
      environment: {
        supabaseUrl: import.meta.env.VITE_SUPABASE_URL,
        supabaseKey: import.meta.env.VITE_SUPABASE_KEY ? "Configurada" : "N√£o configurada",
        nodeEnv: import.meta.env.NODE_ENV,
        dev: import.meta.env.DEV
      },
      dom: {
        available: typeof document !== "undefined",
        rootElement: !!rootElement
      }
    }),
    restore: () => {
      console.error = originalError;
      console.warn = originalWarn;
    }
  };
};

// Fun√ß√£o para verificar se a aplica√ß√£o est√° funcionando
export const checkAppHealth = () => {
  const diagnostics = runDiagnostics();
  
  setTimeout(() => {
    const results = diagnostics.getResults();
    diagnostics.restore();
    
    console.log("üè• Resultados do diagn√≥stico:", results);
    
    if (results.errors.length > 0) {
      console.error("‚ùå Erros encontrados:", results.errors);
    }
    
    if (results.warnings.length > 0) {
      console.warn("‚ö†Ô∏è Avisos encontrados:", results.warnings);
    }
    
    if (!results.environment.supabaseKey) {
      console.error("‚ùå VITE_SUPABASE_KEY n√£o est√° configurada!");
      console.log("üìù Crie um arquivo .env na raiz do projeto com:");
      console.log("VITE_SUPABASE_URL=https://hvtrpkbjgbuypkskqcqm.supabase.co");
      console.log("VITE_SUPABASE_KEY=sua_chave_anonima_aqui");
    }
  }, 1000);
}; 