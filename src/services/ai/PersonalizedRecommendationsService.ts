import { GoogleGenerativeAI } from '@google/generative-ai';
import { supabase } from '@/integrations/supabase/client';
// PredictiveAnalytics removido - funcionalidade integrada no superTourismAI
import { proactiveAlertsService } from './ProactiveAlertsService';

export interface PersonalizedRecommendation {
  id: string;
  category: 'marketing' | 'infrastructure' | 'events' | 'pricing' | 'partnerships' | 'capacity' | 'experience';
  priority: 'low' | 'medium' | 'high' | 'urgent';
  title: string;
  description: string;
  reasoning: string;
  expectedImpact: string;
  timeframe: 'immediate' | 'short_term' | 'medium_term' | 'long_term';
  resources: string[];
  kpis: string[];
  confidence: number;
  createdAt: string;
  cityId?: string;
  regionId?: string;
}

export interface UserProfile {
  role: string;
  cityId?: string;
  regionId?: string;
  interests: string[];
  previousActions: string[];
  preferredTimeframes: string[];
  budgetConstraints?: string;
}

class PersonalizedRecommendationsService {
  private genAI: GoogleGenerativeAI | null = null;
  private model: any = null;

  constructor() {
    const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
    if (apiKey) {
      this.genAI = new GoogleGenerativeAI(apiKey);
      this.model = this.genAI.getGenerativeModel({ model: 'gemini-pro' });
    }
  }

  /**
   * Gera recomenda√ß√µes personalizadas para um gestor
   */
  async generatePersonalizedRecommendations(userProfile: UserProfile): Promise<PersonalizedRecommendation[]> {
    console.log('üéØ Gerando recomenda√ß√µes personalizadas...');

    try {
      // Coletar contexto completo
      const context = await this.collectContextData(userProfile);
      
      // Gerar recomenda√ß√µes baseadas no perfil
      const recommendations = await this.generateContextualRecommendations(userProfile, context);
      
      // Ordenar por prioridade e relev√¢ncia
      const sortedRecommendations = this.prioritizeRecommendations(recommendations, userProfile);
      
      return sortedRecommendations;

    } catch (error) {
      console.error('‚ùå Erro ao gerar recomenda√ß√µes:', error);
      return this.generateFallbackRecommendations(userProfile);
    }
  }

  /**
   * Coleta dados contextuais para personaliza√ß√£o
   */
  private async collectContextData(userProfile: UserProfile) {
    const [
      insights,
      alerts,
      demandForecast,
      seasonality,
      checkIns,
      events
    ] = await Promise.all([
      // predictiveAnalyticsService removido - funcionalidade integrada no superTourismAI  
      Promise.resolve([]), // Placeholder para insights estrat√©gicos
      proactiveAlertsService.getActiveAlerts(userProfile.cityId, userProfile.regionId),
      Promise.resolve([]), // Placeholder para previs√£o de demanda (3 meses)
      Promise.resolve([]), // Placeholder para an√°lise de sazonalidade
      this.getRecentCheckIns(userProfile.cityId, userProfile.regionId),
      this.getRecentEvents(userProfile.cityId, userProfile.regionId)
    ]);

    return {
      insights,
      alerts,
      demandForecast,
      seasonality,
      checkIns,
      events,
      currentMetrics: {
        totalVisitors: checkIns.length,
        eventCount: events.length,
        alertCount: alerts.length,
        avgConfidence: insights.length > 0 
          ? insights.reduce((sum, i) => sum + i.confidence, 0) / insights.length 
          : 0
      }
    };
  }

  /**
   * Gera recomenda√ß√µes contextuais usando IA
   */
  private async generateContextualRecommendations(
    userProfile: UserProfile, 
    context: any
  ): Promise<PersonalizedRecommendation[]> {
    
    if (this.model) {
      return this.generateAIRecommendations(userProfile, context);
    } else {
      return this.generateRuleBasedRecommendations(userProfile, context);
    }
  }

  /**
   * Gera recomenda√ß√µes usando Gemini AI
   */
  private async generateAIRecommendations(
    userProfile: UserProfile, 
    context: any
  ): Promise<PersonalizedRecommendation[]> {
    
    const prompt = this.buildPersonalizedPrompt(userProfile, context);
    
    try {
      const result = await this.model.generateContent(prompt);
      const response = result.response.text();
      
      return this.parseAIRecommendations(response, userProfile);
    } catch (error) {
      console.error('‚ùå Erro na gera√ß√£o com IA:', error);
      return this.generateRuleBasedRecommendations(userProfile, context);
    }
  }

  /**
   * Constr√≥i prompt personalizado para a IA
   */
  private buildPersonalizedPrompt(userProfile: UserProfile, context: any): string {
    return `
Como especialista em turismo e gest√£o p√∫blica, analise o perfil do gestor e contexto atual para gerar recomenda√ß√µes estrat√©gicas personalizadas.

PERFIL DO GESTOR:
- Cargo: ${userProfile.role}
- Interesses: ${userProfile.interests.join(', ')}
- A√ß√µes Anteriores: ${userProfile.previousActions.join(', ')}
- Prefer√™ncias de Prazo: ${userProfile.preferredTimeframes.join(', ')}

CONTEXTO ATUAL:
- Total de Visitantes: ${context.currentMetrics.totalVisitors}
- Eventos Ativos: ${context.currentMetrics.eventCount}
- Alertas Pendentes: ${context.currentMetrics.alertCount}
- Insights Dispon√≠veis: ${context.insights.length}

ALERTAS CR√çTICOS:
${context.alerts.filter((a: any) => a.priority === 'high' || a.priority === 'critical')
  .map((a: any) => `- ${a.title}: ${a.description}`)
  .join('\n')}

PREVIS√ïES:
${context.demandForecast.slice(0, 2)
  .map((f: any) => `- ${f.period}: ${f.predictedVisitors} visitantes previstos`)
  .join('\n')}

Gere 5-7 recomenda√ß√µes personalizadas seguindo este formato JSON:
{
  "recommendations": [
    {
      "category": "marketing|infrastructure|events|pricing|partnerships|capacity|experience",
      "priority": "low|medium|high|urgent",
      "title": "T√≠tulo da recomenda√ß√£o",
      "description": "Descri√ß√£o detalhada",
      "reasoning": "Por que esta recomenda√ß√£o √© relevante",
      "expectedImpact": "Impacto esperado",
      "timeframe": "immediate|short_term|medium_term|long_term",
      "resources": ["recurso1", "recurso2"],
      "kpis": ["kpi1", "kpi2"],
      "confidence": 0.8
    }
  ]
}

Foque em recomenda√ß√µes acion√°veis, espec√≠ficas para o perfil do gestor e baseadas no contexto atual.
    `;
  }

  /**
   * Processa resposta da IA para extrair recomenda√ß√µes
   */
  private parseAIRecommendations(
    aiResponse: string, 
    userProfile: UserProfile
  ): PersonalizedRecommendation[] {
    try {
      // Extrair JSON da resposta
      const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
      if (!jsonMatch) throw new Error('JSON n√£o encontrado');
      
      const parsed = JSON.parse(jsonMatch[0]);
      
      return parsed.recommendations.map((rec: any, index: number) => ({
        id: `rec_${Date.now()}_${index}`,
        category: rec.category,
        priority: rec.priority,
        title: rec.title,
        description: rec.description,
        reasoning: rec.reasoning,
        expectedImpact: rec.expectedImpact,
        timeframe: rec.timeframe,
        resources: rec.resources || [],
        kpis: rec.kpis || [],
        confidence: rec.confidence || 0.8,
        createdAt: new Date().toISOString(),
        cityId: userProfile.cityId,
        regionId: userProfile.regionId
      }));

    } catch (error) {
      console.error('‚ùå Erro ao processar resposta da IA:', error);
      return this.generateRuleBasedRecommendations(userProfile, {});
    }
  }

  /**
   * Gera recomenda√ß√µes baseadas em regras (fallback)
   */
  private generateRuleBasedRecommendations(
    userProfile: UserProfile, 
    context: any
  ): PersonalizedRecommendation[] {
    const recommendations: PersonalizedRecommendation[] = [];
    const baseId = Date.now();

    // Recomenda√ß√µes baseadas em alertas
    if (context.alerts?.length > 0) {
      const criticalAlert = context.alerts.find((a: any) => a.priority === 'critical');
      if (criticalAlert) {
        recommendations.push({
          id: `rec_alert_${baseId}`,
          category: this.mapAlertToCategory(criticalAlert.type),
          priority: 'urgent',
          title: `A√ß√£o Urgente: ${criticalAlert.affectedArea}`,
          description: `Resolver imediatamente: ${criticalAlert.description}`,
          reasoning: 'Alerta cr√≠tico detectado pelo sistema de monitoramento',
          expectedImpact: 'Preven√ß√£o de problemas maiores e melhoria da experi√™ncia',
          timeframe: 'immediate',
          resources: criticalAlert.recommendations,
          kpis: ['Resolu√ß√£o do alerta', 'Melhoria da m√©trica afetada'],
          confidence: 0.95,
          createdAt: new Date().toISOString(),
          cityId: userProfile.cityId,
          regionId: userProfile.regionId
        });
      }
    }

    // Recomenda√ß√µes baseadas em sazonalidade
    if (context.seasonality?.length > 0) {
      const peakMonth = context.seasonality.sort((a: any, b: any) => b.expectedVisitors - a.expectedVisitors)[0];
      recommendations.push({
        id: `rec_seasonal_${baseId}`,
        category: 'marketing',
        priority: 'medium',
        title: `Prepara√ß√£o para Pico em ${peakMonth.monthName}`,
        description: `Prepare-se para o pico de visita√ß√£o em ${peakMonth.monthName} com ${peakMonth.expectedVisitors} visitantes esperados`,
        reasoning: 'An√°lise de sazonalidade indica pico de demanda',
        expectedImpact: 'Maximiza√ß√£o da receita e satisfa√ß√£o dos visitantes',
        timeframe: 'medium_term',
        resources: ['Infraestrutura adicional', 'Campanhas de marketing', 'Coordena√ß√£o de equipes'],
        kpis: ['Visitantes atendidos', 'Satisfa√ß√£o m√©dia', 'Receita gerada'],
        confidence: peakMonth.confidenceLevel,
        createdAt: new Date().toISOString(),
        cityId: userProfile.cityId,
        regionId: userProfile.regionId
      });
    }

    // Recomenda√ß√µes baseadas em previs√µes
    if (context.demandForecast?.length > 0) {
      const nextMonthForecast = context.demandForecast[0];
      recommendations.push({
        id: `rec_forecast_${baseId}`,
        category: 'capacity',
        priority: 'medium',
        title: 'Prepara√ß√£o para Demanda Prevista',
        description: `Prepare-se para ${nextMonthForecast.predictedVisitors} visitantes em ${nextMonthForecast.period}`,
        reasoning: 'Previs√£o de demanda baseada em an√°lise preditiva',
        expectedImpact: 'Melhor prepara√ß√£o e experi√™ncia otimizada',
        timeframe: 'short_term',
        resources: ['Planejamento de capacidade', 'Recursos humanos', 'Log√≠stica'],
        kpis: ['Capacidade utilizada', 'Tempo de espera', 'Satisfa√ß√£o'],
        confidence: 0.85,
        createdAt: new Date().toISOString(),
        cityId: userProfile.cityId,
        regionId: userProfile.regionId
      });
    }

    // Recomenda√ß√µes baseadas no perfil do usu√°rio
    if (userProfile.interests.includes('marketing')) {
      recommendations.push({
        id: `rec_marketing_${baseId}`,
        category: 'marketing',
        priority: 'medium',
        title: 'Otimiza√ß√£o de Campanhas Digitais',
        description: 'Implemente campanhas de marketing digital direcionadas baseadas nos dados de visita√ß√£o',
        reasoning: 'Interesse declarado em marketing e oportunidades identificadas',
        expectedImpact: 'Aumento de 15-25% na atra√ß√£o de visitantes',
        timeframe: 'short_term',
        resources: ['Or√ßamento de marketing', 'Ferramentas digitais', 'Conte√∫do criativo'],
        kpis: ['Alcance das campanhas', 'Taxa de convers√£o', 'Custo por visitante'],
        confidence: 0.8,
        createdAt: new Date().toISOString(),
        cityId: userProfile.cityId,
        regionId: userProfile.regionId
      });
    }

    return recommendations.slice(0, 6); // Limitar a 6 recomenda√ß√µes
  }

  /**
   * Mapeia tipo de alerta para categoria de recomenda√ß√£o
   */
  private mapAlertToCategory(alertType: string): PersonalizedRecommendation['category'] {
    const mapping: Record<string, PersonalizedRecommendation['category']> = {
      'capacity_overload': 'capacity',
      'satisfaction_drop': 'experience',
      'infrastructure_issue': 'infrastructure',
      'marketing_opportunity': 'marketing',
      'demand_spike': 'capacity',
      'revenue_drop': 'pricing'
    };
    return mapping[alertType] || 'experience';
  }

  /**
   * Prioriza recomenda√ß√µes baseado no perfil do usu√°rio
   */
  private prioritizeRecommendations(
    recommendations: PersonalizedRecommendation[], 
    userProfile: UserProfile
  ): PersonalizedRecommendation[] {
    return recommendations.sort((a, b) => {
      // Prioridade urgente primeiro
      if (a.priority === 'urgent' && b.priority !== 'urgent') return -1;
      if (b.priority === 'urgent' && a.priority !== 'urgent') return 1;
      
      // Depois por interesse do usu√°rio
      const aRelevant = userProfile.interests.some(interest => 
        a.category.toLowerCase().includes(interest.toLowerCase()) ||
        a.title.toLowerCase().includes(interest.toLowerCase())
      );
      const bRelevant = userProfile.interests.some(interest => 
        b.category.toLowerCase().includes(interest.toLowerCase()) ||
        b.title.toLowerCase().includes(interest.toLowerCase())
      );
      
      if (aRelevant && !bRelevant) return -1;
      if (bRelevant && !aRelevant) return 1;
      
      // Por fim, por confian√ßa
      return b.confidence - a.confidence;
    });
  }

  /**
   * Gera recomenda√ß√µes de fallback
   */
  private generateFallbackRecommendations(userProfile: UserProfile): PersonalizedRecommendation[] {
    return [
      {
        id: `fallback_${Date.now()}`,
        category: 'experience',
        priority: 'medium',
        title: 'Melhoria da Experi√™ncia do Visitante',
        description: 'Implemente melhorias b√°sicas na experi√™ncia do visitante baseadas em boas pr√°ticas',
        reasoning: 'Recomenda√ß√£o padr√£o para melhoria cont√≠nua',
        expectedImpact: 'Aumento na satisfa√ß√£o e retorno de visitantes',
        timeframe: 'medium_term',
        resources: ['Treinamento de equipe', 'Sinaliza√ß√£o', 'Infraestrutura b√°sica'],
        kpis: ['Avalia√ß√£o m√©dia', 'Taxa de retorno', 'Reclama√ß√µes'],
        confidence: 0.7,
        createdAt: new Date().toISOString(),
        cityId: userProfile.cityId,
        regionId: userProfile.regionId
      }
    ];
  }

  // M√©todos auxiliares
  private async getRecentCheckIns(cityId?: string, regionId?: string) {
    const { data } = await supabase
      .from('passport_stamps')
      .select('*')
      .gte('created_at', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString())
      .limit(100);
    return data || [];
  }

  private async getRecentEvents(cityId?: string, regionId?: string) {
    const { data } = await supabase
      .from('events')
      .select('*')
      .gte('created_at', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString())
      .limit(20);
    return data || [];
  }

  /**
   * Gera recomenda√ß√µes por categoria espec√≠fica
   */
  async getRecommendationsByCategory(
    category: PersonalizedRecommendation['category'],
    userProfile: UserProfile
  ): Promise<PersonalizedRecommendation[]> {
    const allRecommendations = await this.generatePersonalizedRecommendations(userProfile);
    return allRecommendations.filter(rec => rec.category === category);
  }

  /**
   * Marca recomenda√ß√£o como implementada
   */
  async markAsImplemented(recommendationId: string): Promise<void> {
    // Implementar salvamento no banco
    console.log(`‚úÖ Recomenda√ß√£o implementada: ${recommendationId}`);
  }

  /**
   * Obt√©m feedback sobre recomenda√ß√£o
   */
  async submitFeedback(recommendationId: string, rating: number, comments?: string): Promise<void> {
    // Implementar sistema de feedback
    console.log(`üìù Feedback recebido para ${recommendationId}: ${rating}/5`);
  }
}

export const personalizedRecommendationsService = new PersonalizedRecommendationsService(); 