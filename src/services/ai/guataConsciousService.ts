// Guat√° Consciente - Sistema INTELIGENTE de busca e IA
// Foco: Pesquisar na web + usar dados REAIS de MS + integrar parceiros

import { generateContent } from "@/config/gemini";
import { webSearchService } from "./search/webSearchService";
import { MSKnowledgeBase, MSLocation } from "./search/msKnowledgeBase";
import { PartnersIntegrationService, PartnerRecommendation } from "./partnersIntegrationService";
import { CommunityService } from "@/services/community/communityService";
import { CommunityKnowledgeIntegration } from "./communityKnowledgeIntegration";
import { IntelligentItineraryService, ItineraryRequest } from "./intelligentItineraryService";

interface GuataConsciousQuery {
  question: string;
  userId?: string;
  sessionId?: string;
}

interface GuataConsciousResponse {
  answer: string;
  confidence: number;
  sources: Array<{
    title: string;
    url?: string;
    type: 'web' | 'official' | 'ms_knowledge' | 'partner' | 'community';
  }>;
  metadata: {
    processingTime: number;
    searchResults: number;
    msLocationsFound: number;
    partnersFound: number;
    communityContributions: number;
  };
}

class GuataConsciousService {
  
  /**
   * Processa pergunta com busca COMPLETA: Web + MS + Parceiros + Comunidade
   */
  async processQuestion(query: GuataConsciousQuery): Promise<GuataConsciousResponse> {
    const startTime = Date.now();
    console.log(`üß† Guat√° processando: "${query.question}"`);

    try {
      // 1. Verificar se √© solicita√ß√£o de roteiro
      const itineraryRequest = this.detectItineraryRequest(query.question);
      
      if (itineraryRequest) {
        console.log('üó∫Ô∏è Detectada solicita√ß√£o de roteiro');
        return await this.generateItineraryResponse(itineraryRequest, query);
      }

      // 2. Buscar em M√öLTIPLAS fontes REAIS
      // Buscar informa√ß√µes com PRIORIDADE: Web Search como principal
      const [webResults, partners, community] = await Promise.all([
        this.searchWebReal(query.question), // PRINCIPAL - busca web ilimitada
        this.searchPartners(query.question, query.userId), // Se existirem
        this.searchCommunityContributions(query.question) // Se relevante
      ]);

      // MS Knowledge APENAS como complemento (n√£o paralelo para n√£o competir)
      const msLocations = await this.searchMSKnowledge(query.question);

      console.log(`üìä Resultados encontrados (Web primeiro):
        - Web: ${webResults?.length || 0}
        - Parceiros: ${partners?.length || 0}
        - Comunidade: ${community?.length || 0}
        - MS Knowledge: ${msLocations?.length || 0} (complemento)`);
        
      // DEBUG: Verificar estrutura de webResults
      console.log('üîç DEBUG webResults:', { 
        type: typeof webResults, 
        isArray: Array.isArray(webResults),
        keys: webResults ? Object.keys(webResults) : 'null',
        length: webResults?.length
      });
      
      // 3. Gerar resposta VERDADEIRA baseada em fontes REAIS
      const answer = await this.generateIntelligentAnswer(
        query.question, 
        webResults, 
        msLocations, 
        partners,
        community
      );
      
      const processingTime = Date.now() - startTime;
      
      // 4. Combinar todas as fontes (Web primeiro, MS complemento)
      const allSources = [
        ...(webResults || []).map((r: any) => ({
          title: r.title,
          url: r.url,
          type: r.source?.includes('gov.br') ? 'official' as const : 'web' as const
        })),
        ...(partners || []).map((p: any) => ({
          title: p.name,
          url: p.website_link,
          type: 'partner' as const
        })),
        ...(community || []).map((c: any) => ({
          title: c.title,
          url: undefined,
          type: 'community' as const
        })),
        ...(msLocations || []).map((l: any) => ({
          title: l.name,
          url: l.contact?.website,
          type: 'ms_knowledge' as const
        }))
      ];
      
      return {
        answer,
        confidence: this.calculateOverallConfidence(webResults, msLocations, partners, community),
        sources: allSources.slice(0, 10), // M√°ximo 10 fontes
        metadata: {
          processingTime,
          searchResults: webResults?.length || 0,
          msLocationsFound: msLocations?.length || 0,
          partnersFound: partners?.length || 0,
          communityContributions: community?.length || 0,
          verificationStatus: allSources.length > 0 ? 'verified' as const : 'partial' as const
        }
      };

    } catch (error) {
      console.error("‚ùå Erro no processamento:", error);
      
      // Resposta de emerg√™ncia com base em MS
      const emergencyMSInfo = MSKnowledgeBase.searchLocations(query.question);
      
      if (emergencyMSInfo.length > 0) {
        const location = emergencyMSInfo[0];
        const answer = `Ol√°! Mesmo com dificuldades t√©cnicas, posso te ajudar com informa√ß√µes sobre **${location.name}** em ${location.city}:

${MSKnowledgeBase.formatLocationResponse(location)}

Para mais informa√ß√µes atualizadas, recomendo consultar os sites oficiais de turismo de MS.`;

        return {
          answer,
          confidence: 0.6,
          sources: [{
            title: location.name,
            url: location.contact?.website,
            type: 'ms_knowledge'
          }],
          metadata: {
            processingTime: Date.now() - startTime,
            searchResults: 0,
            msLocationsFound: 1,
            partnersFound: 0,
            communityContributions: 0
          }
        };
      }
      
      return {
        answer: "Desculpe, estou com dificuldades t√©cnicas. Pode tentar reformular sua pergunta? Ou pergunte sobre locais espec√≠ficos como Bioparque Pantanal, Feira Central, ou atra√ß√µes em Bonito.",
        confidence: 0.3,
        sources: [],
        metadata: {
          processingTime: Date.now() - startTime,
          searchResults: 0,
          msLocationsFound: 0,
          partnersFound: 0,
          communityContributions: 0
        }
      };
    }
  }

  /**
   * Busca REAL na web usando servi√ßos implementados
   */
  private async searchWebReal(question: string): Promise<Array<{
    title: string;
    content: string;
    url: string;
    source: string;
    reliability: string;
  }>> {
    try {
      console.log('üîç Buscando informa√ß√µes REAIS na web...');
      
      // Usar o servi√ßo de busca web que j√° est√° implementado
      const results = await webSearchService.search(question, 'turismo');
      
      console.log(`‚úÖ Busca web real conclu√≠da: ${results.length} resultados encontrados`);
      
      // Converter para formato do servi√ßo consciente
      return results.map(result => ({
        title: result.title,
        content: result.snippet,
        url: result.url,
        source: result.source,
        reliability: result.reliability
      }));
      
    } catch (error) {
      console.error('‚ùå Erro na busca web real:', error);
      return []; // Sem fallback simulado - deixar para o MS Knowledge
    }
  }

  /**
   * Buscar na base de conhecimento REAL de MS
   */
  private async searchMSKnowledge(question: string): Promise<MSLocation[]> {
    try {
      console.log('üèõÔ∏è Buscando na base de conhecimento de MS...');
      
      const locations = MSKnowledgeBase.searchLocations(question);
      const activeLocations = locations.filter(loc => MSKnowledgeBase.isLocationActive(loc));
      
      console.log(`‚úÖ MS Knowledge: ${activeLocations.length} locais REAIS encontrados`);
      return activeLocations.slice(0, 3); // M√°ximo 3 locais
      
    } catch (error) {
      console.error('‚ùå Erro na busca MS Knowledge:', error);
      return [];
    }
  }

  /**
   * Buscar parceiros REAIS da plataforma
   */
  private async searchPartners(question: string, userId?: string): Promise<PartnerRecommendation[]> {
    try {
      console.log('ü§ù Verificando parceiros na plataforma...');
      
      // Primeiro verificar se h√° parceiros aprovados
      const hasPartners = await PartnersIntegrationService.hasApprovedPartners();
      
      if (!hasPartners) {
        console.log('‚ö†Ô∏è Nenhum parceiro aprovado na plataforma ainda');
        return [];
      }
      
      // Buscar parceiros relevantes
      const recommendations = await PartnersIntegrationService.searchRelevantPartners(question);
      
      console.log(`‚úÖ Parceiros: ${recommendations.length} recomenda√ß√µes encontradas`);
      return recommendations;
      
    } catch (error) {
      console.error('‚ùå Erro na busca de parceiros:', error);
      return [];
    }
  }

  /**
   * Buscar contribui√ß√µes REAIS da comunidade
   */
  private async searchCommunityContributions(question: string): Promise<any[]> {
    try {
      console.log('üåê Buscando contribui√ß√µes da comunidade...');
      
      const communityService = new CommunityService();
      
      // Buscar sugest√µes aprovadas da comunidade
      const approvedSuggestions = await communityService.getSuggestions({
        status: 'approved',
        sortBy: 'votes',
        limit: 3
      });
      
      // Filtrar sugest√µes relevantes para a pergunta
      const relevantSuggestions = approvedSuggestions.filter(suggestion => {
        const searchText = `${suggestion.title} ${suggestion.description}`.toLowerCase();
        const questionWords = question.toLowerCase().split(' ');
        return questionWords.some(word => word.length > 3 && searchText.includes(word));
      });
      
      console.log(`‚úÖ Comunidade: ${relevantSuggestions.length} contribui√ß√µes aprovadas encontradas`);
      return relevantSuggestions;
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Tabelas da comunidade ainda n√£o configuradas (normal em desenvolvimento)');
      console.log('üîÑ Continuando sem contribui√ß√µes da comunidade...');
      return [];
    }
  }

  /**
   * Gera uma resposta inteligente combinando todas as fontes dispon√≠veis
   * ATUALIZADO: Prioriza busca web real, MS apenas como complemento
   */
  private async generateIntelligentAnswer(
    query: string,
    webResults: any,
    msLocations: any[],
    partners: any[],
    community: any[]
  ): Promise<string> {
    
    const systemPrompt = `Voc√™ √© **Guat√°**, guia de turismo oficial de Mato Grosso do Sul.

üéØ **MISS√ÉO PRINCIPAL:** Fornecer informa√ß√µes **100% VERDADEIRAS E ATUALIZADAS** sobre turismo em MS.

üìä **FONTES DE INFORMA√á√ÉO (em ordem de prioridade):**

1. üåê **INFORMA√á√ïES WEB ATUAIS** (PRINCIPAL)
   - Use SEMPRE como fonte prim√°ria para QUALQUER pergunta
   - Dados de sites oficiais, Google Search atual
   - Informa√ß√µes em tempo real e atualizadas

2. ü§ù **PARCEIROS DA PLATAFORMA** (se relevantes)
   - Empresas verificadas e aprovadas
   - Destaque quando √∫teis para a pergunta

3. üåç **COMUNIDADE** (se pertinentes)  
   - Sugest√µes aprovadas pelos usu√°rios
   - Experi√™ncias reais compartilhadas

4. üèõÔ∏è **DADOS VERIFICADOS MS** (COMPLEMENTO apenas)
   - Use apenas para ENRIQUECER respostas web
   - Informa√ß√µes espec√≠ficas e verificadas de MS

üõ°Ô∏è **REGRAS CR√çTICAS DE VERACIDADE:**

‚ùå **NUNCA FA√áA:**
- Inventar telefones, endere√ßos, pre√ßos ou hor√°rios
- Criar informa√ß√µes que n√£o est√£o nas fontes fornecidas
- Dar dados desatualizados como se fossem atuais
- Misturar informa√ß√µes de lugares diferentes

‚úÖ **SEMPRE FA√áA:**
- Base suas respostas nas informa√ß√µes web encontradas
- Cite a fonte: "Segundo o site oficial...", "De acordo com informa√ß√µes atuais..."
- Se n√£o souber algo espec√≠fico, seja transparente: "N√£o encontrei essa informa√ß√£o atualizada"
- Prefira recomendar consultar sites oficiais a inventar dados
- Seja espec√≠fico com endere√ßos completos quando dispon√≠veis

üìù **ESTRUTURA DA RESPOSTA:**
- Comece com a informa√ß√£o web atual (principal)
- Adicione detalhes de parceiros se relevantes
- Complemente com dados MS verificados
- Inclua sugest√µes da comunidade se √∫teis
- Termine com fontes e recomenda√ß√µes de verifica√ß√£o

üí° **LEMBRE-SE:** Voc√™ √© um guia confi√°vel. √â melhor admitir n√£o saber algo espec√≠fico do que fornecer informa√ß√£o incorreta.`;

    const userPrompt = `Pergunta: ${query}

üåê **INFORMA√á√ïES WEB ATUAIS:**
${webResults?.length ? 
  webResults.map((r: any) => `
‚Ä¢ ${r.title}
  ${r.content}
  üìç Fonte: ${r.url}
  `).join('\n') : 'Nenhuma informa√ß√£o web espec√≠fica encontrada.'}

ü§ù **PARCEIROS DA PLATAFORMA:**
${partners?.length ? 
  partners.map(p => `
‚Ä¢ ${p.name} (${p.category})
  üìç ${p.location || 'Localiza√ß√£o a consultar'}
  üìû ${p.contact_info || 'Contato via plataforma'}
  ‚≠ê Parceiro verificado - Tier ${p.tier}
  `).join('\n') : 'Nenhum parceiro espec√≠fico encontrado para esta consulta.'}

üåç **COMUNIDADE:**
${community?.length ? 
  community.map(c => `
‚Ä¢ ${c.title}
  ${c.description}
  üë§ Sugest√£o aprovada da comunidade
  `).join('\n') : 'Nenhuma sugest√£o espec√≠fica da comunidade.'}

üèõÔ∏è **DADOS VERIFICADOS MS (complemento):**
${msLocations?.length ? 
  msLocations.map(loc => `
‚Ä¢ ${loc.name}
  üìç ${loc.address}
  üïí ${loc.hours}
  üìû ${loc.contact}
  ‚úÖ Verificado em: ${loc.last_verified}
  `).join('\n') : 'Nenhum dado espec√≠fico de MS encontrado.'}

Responda de forma √∫til, verdadeira e atualizada, priorizando as informa√ß√µes web e sendo transparente sobre as fontes.`;

    try {
      const response = await generateContent(systemPrompt, userPrompt);
      return response || this.generateTruthfulFallback(query, webResults, msLocations, partners);
    } catch (error) {
      console.error('‚ùå Erro na gera√ß√£o com Gemini:', error);
      return this.generateTruthfulFallback(query, webResults, msLocations, partners);
    }
  }

  /**
   * Fallback transparente e verdadeiro quando IA falha
   */
  private generateTruthfulFallback(query: string, webResults: any, msLocations: any[], partners: any[]): string {
    let response = "ü§ñ Tive um problema t√©cnico, mas posso compartilhar o que encontrei:\n\n";
    
    // Priorizar informa√ß√µes web
    if (webResults?.length) {
      response += "üåê **Informa√ß√µes atuais encontradas:**\n";
      webResults.slice(0, 2).forEach((result: any) => {
        response += `‚Ä¢ ${result.title}\n`;
        if (result.content) response += `  ${result.content}\n`;
        if (result.url) response += `  üîó ${result.url}\n`;
      });
      response += "\n";
    }
    
    // Adicionar parceiros se existirem
    if (partners?.length) {
      response += "ü§ù **Parceiros da plataforma:**\n";
      partners.slice(0, 2).forEach(partner => {
        response += `‚Ä¢ ${partner.name}\n`;
        if (partner.location) response += `  üìç ${partner.location}\n`;
      });
      response += "\n";
    }
    
    // Complementar com MS se √∫til
    if (msLocations?.length) {
      response += "üèõÔ∏è **Informa√ß√µes verificadas de MS:**\n";
      msLocations.slice(0, 1).forEach(loc => {
        response += `‚Ä¢ ${loc.name}\n`;
        response += `  üìç ${loc.address}\n`;
        if (loc.hours) response += `  üïí ${loc.hours}\n`;
        if (loc.contact) response += `  üìû ${loc.contact}\n`;
      });
      response += "\n";
    }
    
    // Se n√£o tiver informa√ß√µes suficientes
    if (!webResults?.length && !partners?.length && !msLocations?.length) {
      response = `N√£o encontrei informa√ß√µes atualizadas sobre "${query}".\n\n` +
                `üí° **Recomenda√ß√µes:**\n` +
                `‚Ä¢ Consulte o site oficial: turismo.ms.gov.br\n` +
                `‚Ä¢ Entre em contato com a Fundtur-MS: (67) 3318-5000\n` +
                `‚Ä¢ Tente reformular sua pergunta com mais detalhes\n\n` +
                `üîÑ Posso tentar buscar informa√ß√µes mais espec√≠ficas se voc√™ detalhar sua pergunta.`;
    } else {
      response += "üí° **Para informa√ß√µes mais detalhadas e atualizadas:**\n";
      response += "‚Ä¢ Site oficial: turismo.ms.gov.br\n";
      response += "‚Ä¢ Fundtur-MS: (67) 3318-5000\n";
    }
    
    return response;
  }

  /**
   * Calcular confian√ßa geral com base em todas as fontes
   */
  private calculateOverallConfidence(webResults: any, msLocations: any[], partners: any[], community?: any[]): number {
    let confidence = 0.3; // Base m√≠nima
    
    // PRINCIPAL: Resultados web (fonte prim√°ria)
    if (webResults && webResults.length > 0) {
      confidence += Math.min(webResults.length * 0.2, 0.5); // M√°x 0.5 para 3+ resultados
      
      // Bonus para fontes oficiais
      const officialResults = webResults.filter((r: any) => 
        r.url?.includes('.gov.br') || r.source?.includes('oficial')
      );
      if (officialResults.length > 0) {
        confidence += 0.2; // Bonus para fontes oficiais
      }
    }
    
    // COMPLEMENTO: Parceiros da plataforma
    if (partners && partners.length > 0) {
      confidence += Math.min(partners.length * 0.15, 0.3); // M√°x 0.3 para 2+ parceiros
    }
    
    // COMPLEMENTO: Contribui√ß√µes da comunidade
    if (community && community.length > 0) {
      confidence += Math.min(community.length * 0.1, 0.2); // M√°x 0.2 para 2+ contribui√ß√µes
    }
    
    // COMPLEMENTO: MS Knowledge (enriquecimento)
    if (msLocations && msLocations.length > 0) {
      confidence += Math.min(msLocations.length * 0.1, 0.2); // M√°x 0.2 para 2+ locais
    }
    
    return Math.min(confidence, 1.0); // M√°ximo 1.0
  }

  /**
   * Detectar se a pergunta √© uma solicita√ß√£o de roteiro
   */
  private detectItineraryRequest(question: string): ItineraryRequest | null {
    const text = question.toLowerCase();
    
    // Palavras-chave para detectar solicita√ß√£o de roteiro
    const itineraryKeywords = [
      'roteiro', 'itiner√°rio', 'plano de viagem', 'o que fazer',
      'quantos dias', 'dias em', 'visitar em', 'turismo em',
      'programa de', 'cronograma', 'agenda', 'passear'
    ];
    
    const hasItineraryKeyword = itineraryKeywords.some(keyword => text.includes(keyword));
    
    if (!hasItineraryKeyword) return null;
    
    try {
      // Extrair informa√ß√µes da pergunta
      const destination = this.extractDestination(text);
      const days = this.extractDays(text);
      const budget = this.extractBudget(text);
      const interests = this.extractInterests(text);
      const groupType = this.extractGroupType(text);
      const mobility = this.extractMobility(text);
      
      if (!destination) return null;
      
      return {
        destination,
        days: days || 2, // Default 2 dias
        budget: budget || 'medio',
        interests: interests.length > 0 ? interests : ['natureza', 'cultura'],
        group_type: groupType || 'casal',
        mobility: mobility || 'carro'
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao extrair dados do roteiro:', error);
      return null;
    }
  }

  /**
   * Extrair destino da pergunta
   */
  private extractDestination(text: string): string | null {
    const destinations = [
      'campo grande', 'bonito', 'pantanal', 'corumb√°', 
      'aquidauana', 'coxim', 'tr√™s lagoas', 'dourados'
    ];
    
    for (const dest of destinations) {
      if (text.includes(dest)) {
        return dest.split(' ').map(word => 
          word.charAt(0).toUpperCase() + word.slice(1)
        ).join(' ');
      }
    }
    
    // Fallback para "MS" ou "mato grosso do sul"
    if (text.includes('ms') || text.includes('mato grosso do sul')) {
      return 'Campo Grande'; // Capital como padr√£o
    }
    
    return null;
  }

  /**
   * Extrair n√∫mero de dias
   */
  private extractDays(text: string): number | null {
    const dayMatches = text.match(/(\d+)\s*(dia|dias)/);
    if (dayMatches) {
      return parseInt(dayMatches[1]);
    }
    
    // Palavras por extenso
    const dayWords = {
      'um': 1, 'uma': 1, 'dois': 2, 'tr√™s': 3, 'quatro': 4, 'cinco': 5,
      'seis': 6, 'sete': 7, 'oito': 8, 'nove': 9, 'dez': 10
    };
    
    for (const [word, num] of Object.entries(dayWords)) {
      if (text.includes(`${word} dia`)) {
        return num;
      }
    }
    
    return null;
  }

  /**
   * Extrair or√ßamento
   */
  private extractBudget(text: string): 'baixo' | 'medio' | 'alto' | null {
    if (text.includes('barato') || text.includes('econ√¥mico') || text.includes('baixo custo')) {
      return 'baixo';
    }
    if (text.includes('caro') || text.includes('luxo') || text.includes('premium')) {
      return 'alto';
    }
    if (text.includes('m√©dio') || text.includes('moderado')) {
      return 'medio';
    }
    return null;
  }

  /**
   * Extrair interesses
   */
  private extractInterests(text: string): string[] {
    const interests = [];
    
    if (text.includes('natureza') || text.includes('ecoturismo') || text.includes('trilha')) {
      interests.push('natureza');
    }
    if (text.includes('cultura') || text.includes('museu') || text.includes('hist√≥ria')) {
      interests.push('cultura');
    }
    if (text.includes('comida') || text.includes('restaurante') || text.includes('gastronomia')) {
      interests.push('gastronomia');
    }
    if (text.includes('aventura') || text.includes('radical') || text.includes('rapel')) {
      interests.push('aventura');
    }
    if (text.includes('fam√≠lia') || text.includes('crian√ßa') || text.includes('filho')) {
      interests.push('fam√≠lia');
    }
    
    return interests;
  }

  /**
   * Extrair tipo de grupo
   */
  private extractGroupType(text: string): 'sozinho' | 'casal' | 'fam√≠lia' | 'amigos' | 'grupo' | null {
    if (text.includes('sozinho') || text.includes('solo')) return 'sozinho';
    if (text.includes('casal') || text.includes('namorado') || text.includes('esposa')) return 'casal';
    if (text.includes('fam√≠lia') || text.includes('filho') || text.includes('crian√ßa')) return 'fam√≠lia';
    if (text.includes('amigo') || text.includes('galera')) return 'amigos';
    if (text.includes('grupo') || text.includes('turma')) return 'grupo';
    return null;
  }

  /**
   * Extrair tipo de mobilidade
   */
  private extractMobility(text: string): 'carro' | 'transporte_publico' | 'a_pe' | null {
    if (text.includes('carro') || text.includes('dirigindo')) return 'carro';
    if (text.includes('√¥nibus') || text.includes('transporte p√∫blico')) return 'transporte_publico';
    if (text.includes('a p√©') || text.includes('caminhando')) return 'a_pe';
    return null;
  }

  /**
   * Gerar resposta com roteiro completo
   */
  private async generateItineraryResponse(
    itineraryRequest: ItineraryRequest, 
    query: GuataConsciousQuery
  ): Promise<GuataConsciousResponse> {
    const startTime = Date.now();
    
    try {
      console.log('üó∫Ô∏è Gerando roteiro personalizado:', itineraryRequest);
      
      // Gerar roteiro inteligente
      const itinerary = await IntelligentItineraryService.generateItinerary(itineraryRequest);
      
      // Validar roteiro
      const isValid = IntelligentItineraryService.validateItinerary(itinerary);
      
      if (!isValid) {
        throw new Error('Roteiro gerado inv√°lido');
      }
      
      // Formatar resposta
      const formattedAnswer = this.formatItineraryAnswer(itinerary);
      
      const processingTime = Date.now() - startTime;
      
      return {
        answer: formattedAnswer,
        confidence: 0.9,
        sources: [
          { title: 'Base de Conhecimento MS', type: 'ms_knowledge' },
          { title: 'Parceiros da Plataforma', type: 'partner' },
          { title: 'Roteiro Personalizado', type: 'ms_knowledge' }
        ],
        metadata: {
          processingTime,
          searchResults: 0,
          msLocationsFound: itinerary.days.reduce((total, day) => total + day.locations.length, 0),
          partnersFound: itinerary.days.reduce((total, day) => total + day.partners.length, 0),
          communityContributions: 0
        }
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao gerar roteiro:', error);
      
      // Fallback para resposta padr√£o
      return {
        answer: `Ol√°! Adoraria criar um roteiro personalizado para ${itineraryRequest.destination}! 

Para te ajudar melhor, posso sugerir alguns locais verificados:

${this.generateQuickSuggestions(itineraryRequest.destination)}

Gostaria de mais detalhes sobre algum local espec√≠fico?`,
        confidence: 0.6,
        sources: [{ title: 'Sugest√µes B√°sicas', type: 'ms_knowledge' }],
        metadata: {
          processingTime: Date.now() - startTime,
          searchResults: 0,
          msLocationsFound: 3,
          partnersFound: 0,
          communityContributions: 0
        }
      };
    }
  }

  /**
   * Formatar resposta do roteiro
   */
  private formatItineraryAnswer(itinerary: any): string {
    let answer = `üó∫Ô∏è **${itinerary.title}**\n\n`;
    answer += `üìù ${itinerary.summary}\n\n`;
    answer += `üí∞ **Custo estimado:** ${itinerary.estimated_total_cost}\n\n`;
    
    // Dias do roteiro
    for (const day of itinerary.days) {
      answer += `## ${day.title}\n`;
      answer += `üíµ **Custo estimado:** ${day.estimated_cost}\n\n`;
      
      // Locais do dia
      for (const item of day.locations) {
        const loc = item.location;
        answer += `### üìç ${loc.name} - ${item.time_slot}\n`;
        answer += `üìù ${loc.description}\n`;
        if (loc.address) answer += `üè† **Endere√ßo:** ${loc.address}\n`;
        if (loc.hours) answer += `üïí **Hor√°rios:** ${loc.hours}\n`;
        if (loc.price_range) answer += `üí∞ **Pre√ßos:** ${loc.price_range}\n`;
        if (loc.contact?.phone) answer += `üìû **Contato:** ${loc.contact.phone}\n`;
        answer += `‚è±Ô∏è **Dura√ß√£o:** ${item.duration}\n`;
        answer += `üí° ${item.why_recommended}\n\n`;
      }
      
      // Parceiros do dia
      if (day.partners.length > 0) {
        answer += `### ü§ù Parceiros Recomendados:\n`;
        for (const partner of day.partners) {
          answer += `**${partner.partner.name}** - ${partner.contact_info}\n`;
          answer += `${partner.recommendation_reason}\n\n`;
        }
      }
      
      // Dicas do dia
      if (day.tips.length > 0) {
        answer += `### üí° Dicas do Dia:\n`;
        for (const tip of day.tips) {
          answer += `‚Ä¢ ${tip}\n`;
        }
        answer += '\n';
      }
      
      answer += '---\n\n';
    }
    
    // Dicas gerais
    answer += `## üìã Dicas Gerais:\n`;
    for (const tip of itinerary.general_tips) {
      answer += `‚Ä¢ ${tip}\n`;
    }
    answer += '\n';
    
    // Contatos de emerg√™ncia
    answer += `## üÜò Contatos de Emerg√™ncia:\n`;
    for (const contact of itinerary.emergency_contacts) {
      answer += `‚Ä¢ **${contact.name}:** ${contact.phone} (${contact.service})\n`;
    }
    
    answer += '\n‚úÖ **Roteiro baseado em informa√ß√µes verificadas e atualizadas!**';
    
    return answer;
  }

  /**
   * Gerar sugest√µes r√°pidas para fallback
   */
  private generateQuickSuggestions(destination: string): string {
    const suggestions = MSKnowledgeBase.searchLocations(destination).slice(0, 3);
    
    if (suggestions.length === 0) {
      return '‚Ä¢ Bioparque Pantanal - maior aqu√°rio de √°gua doce do mundo (gratuito)\n‚Ä¢ Feira Central - gastronomia e artesanato regional\n‚Ä¢ Parque das Na√ß√µes Ind√≠genas - trilhas e esportes';
    }
    
    return suggestions.map(loc => 
      `‚Ä¢ **${loc.name}** - ${loc.description} ${loc.price_range ? `(${loc.price_range})` : ''}`
    ).join('\n');
  }

  /**
   * Health check completo de todas as fontes
   */
  async healthCheck(): Promise<{
    status: 'healthy' | 'unhealthy';
    message: string;
    details: {
      webSearch: boolean;
      msKnowledge: boolean;
      partners: boolean;
      community: boolean;
    };
  }> {
    try {
      console.log('üîç Executando health check completo...');
      
      // Testar todas as fontes
      const [webResults, msLocations, hasPartners] = await Promise.all([
        this.searchWebReal('bioparque').catch(() => []),
        this.searchMSKnowledge('bioparque').catch(() => []),
        PartnersIntegrationService.hasApprovedPartners().catch(() => false)
      ]);
      
      const details = {
        webSearch: webResults.length > 0,
        msKnowledge: msLocations.length > 0,
        partners: hasPartners,
        community: true // Comunidade sempre dispon√≠vel via Supabase
      };
      
      const healthyComponents = Object.values(details).filter(Boolean).length;
      const isHealthy = healthyComponents >= 2; // Pelo menos 2 fontes funcionando
      
      const message = `Guat√°: ${healthyComponents}/4 fontes funcionando. 
        Web: ${details.webSearch ? '‚úÖ' : '‚ùå'} | 
        MS: ${details.msKnowledge ? '‚úÖ' : '‚ùå'} | 
        Parceiros: ${details.partners ? '‚úÖ' : '‚ùå'} | 
        Comunidade: ${details.community ? '‚úÖ' : '‚ùå'}`;
      
      return {
        status: isHealthy ? 'healthy' : 'unhealthy',
        message,
        details
      };
      
    } catch (error) {
      console.error('‚ùå Erro no health check:', error);
      return {
        status: 'unhealthy',
        message: 'Erro no sistema de verifica√ß√£o',
        details: {
          webSearch: false,
          msKnowledge: false,
          partners: false,
          community: false
        }
      };
    }
  }
}

export const guataConsciousService = new GuataConsciousService();
export type { GuataConsciousQuery, GuataConsciousResponse };
