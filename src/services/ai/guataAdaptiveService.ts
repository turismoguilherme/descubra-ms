/**
 * üß† GUAT√Å ADAPTATIVO - IA que Aprende e Melhora Continuamente
 * 
 * Funcionalidades:
 * - Aprendizado cont√≠nuo baseado em intera√ß√µes
 * - Busca web inteligente para informa√ß√µes atualizadas
 * - An√°lise de contexto e prefer√™ncias do usu√°rio
 * - Melhoria autom√°tica das respostas
 * - Sistema de mem√≥ria persistente
 */

import { generateContent } from "@/config/gemini";
import { supabase } from "@/integrations/supabase/client";

export interface AdaptiveQuery {
  question: string;
  userId?: string;
  sessionId?: string;
  userLocation?: string;
  conversationHistory?: string[];
  userPreferences?: UserPreferences;
}

export interface AdaptiveResponse {
  answer: string;
  confidence: number;
  sources: string[];
  processingTime: number;
  learningInsights: LearningInsights;
  adaptiveImprovements: string[];
  memoryUpdates: MemoryUpdate[];
}

export interface UserPreferences {
  interests: string[];
  preferredDestinations: string[];
  budgetRange: string;
  travelStyle: string;
  previousQuestions: string[];
  feedbackHistory: FeedbackEntry[];
}

export interface LearningInsights {
  questionType: string;
  userIntent: string;
  knowledgeGaps: string[];
  improvementSuggestions: string[];
  contextRelevance: number;
}

export interface MemoryUpdate {
  type: 'preference' | 'fact' | 'pattern' | 'feedback';
  content: string;
  confidence: number;
  source: string;
}

export interface FeedbackEntry {
  question: string;
  response: string;
  rating: number;
  feedback: string;
  timestamp: Date;
}

class GuataAdaptiveService {
  private readonly LEARNING_THRESHOLD = 0.7;
  private readonly MEMORY_CACHE = new Map<string, any>();
  
  /**
   * PROCESSAMENTO PRINCIPAL ADAPTATIVO
   */
  async processQuestion(query: AdaptiveQuery): Promise<AdaptiveResponse> {
    const startTime = Date.now();
    console.log('üß† Guat√° Adaptativo: Processando pergunta com IA que aprende...');
    
    try {
      // 1. AN√ÅLISE DE CONTEXTO E APRENDIZADO
      const contextAnalysis = await this.analyzeContext(query);
      console.log('üìä An√°lise de contexto:', contextAnalysis);
      
      // 2. BUSCA INTELIGENTE MULTI-FONTE
      const searchResults = await this.intelligentSearch(query.question, contextAnalysis);
      console.log('üîç Busca inteligente:', searchResults.length, 'resultados');
      
      // 3. GERA√á√ÉO DE RESPOSTA ADAPTATIVA
      const response = await this.generateAdaptiveResponse(
        query,
        contextAnalysis,
        searchResults
      );
      
      // 4. APRENDIZADO E MELHORIA CONT√çNUA
      const learningInsights = await this.learnFromInteraction(query, response);
      console.log('üéì Insights de aprendizado:', learningInsights);
      
      // 5. ATUALIZA√á√ÉO DE MEM√ìRIA
      const memoryUpdates = await this.updateMemory(query, response, learningInsights);
      console.log('üíæ Atualiza√ß√µes de mem√≥ria:', memoryUpdates.length);
      
      const processingTime = Date.now() - startTime;
      
      return {
        answer: response.answer,
        confidence: response.confidence,
        sources: response.sources,
        processingTime,
        learningInsights,
        adaptiveImprovements: learningInsights.improvementSuggestions,
        memoryUpdates
      };
      
    } catch (error) {
      console.error('‚ùå Erro no Guat√° Adaptativo:', error);
      
      return {
        answer: "ü¶¶ Desculpe, tive um problema t√©cnico. Mas estou aprendendo com cada erro para melhorar! Pode tentar novamente?",
        confidence: 0.1,
        sources: ['error'],
        processingTime: Date.now() - startTime,
        learningInsights: {
          questionType: 'error',
          userIntent: 'unknown',
          knowledgeGaps: ['technical_issue'],
          improvementSuggestions: ['improve_error_handling'],
          contextRelevance: 0
        },
        adaptiveImprovements: ['Melhorar tratamento de erros'],
        memoryUpdates: []
      };
    }
  }

  /**
   * AN√ÅLISE DE CONTEXTO E APRENDIZADO
   */
  private async analyzeContext(query: AdaptiveQuery): Promise<any> {
    const analysisPrompt = `
Analise o contexto da pergunta do usu√°rio e identifique:

PERGUNTA: "${query.question}"

HIST√ìRICO: ${query.conversationHistory?.join(' | ') || 'Nenhum'}

PREFER√äNCIAS: ${JSON.stringify(query.userPreferences || {}, null, 2)}

Identifique:
1. Tipo de pergunta (turismo, gastronomia, hospedagem, transporte, eventos, etc.)
2. Inten√ß√£o do usu√°rio (buscar informa√ß√£o, comparar op√ß√µes, planejar viagem, etc.)
3. Contexto geogr√°fico (Bonito, Pantanal, Campo Grande, etc.)
4. N√≠vel de detalhamento necess√°rio
5. Prefer√™ncias impl√≠citas do usu√°rio
6. Padr√µes de comportamento

Responda em JSON:
{
  "questionType": "string",
  "userIntent": "string", 
  "geographicContext": "string",
  "detailLevel": "basic|intermediate|advanced",
  "implicitPreferences": ["string"],
  "behaviorPatterns": ["string"],
  "contextRelevance": 0.0-1.0
}`;

    try {
      const result = await generateContent(analysisPrompt);
      if (result.ok) {
        return JSON.parse(result.text);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro na an√°lise de contexto:', error);
    }
    
    return {
      questionType: 'general',
      userIntent: 'information_seeking',
      geographicContext: 'Mato Grosso do Sul',
      detailLevel: 'intermediate',
      implicitPreferences: [],
      behaviorPatterns: [],
      contextRelevance: 0.5
    };
  }

  /**
   * BUSCA INTELIGENTE MULTI-FONTE
   */
  private async intelligentSearch(question: string, context: any): Promise<any[]> {
    const results: any[] = [];
    
    try {
      // 1. BUSCA WEB VIA SUPABASE RAG
      console.log('üåê Buscando informa√ß√µes atualizadas na web...');
      const { data: webData, error: webError } = await supabase.functions.invoke("guata-web-rag", {
        body: { 
          question, 
          state_code: 'MS',
          max_results: 8,
          include_sources: true,
          context: context.geographicContext
        }
      });
      
      if (!webError && webData?.sources) {
        results.push(...webData.sources.map((source: any) => ({
          ...source,
          source: 'web_rag',
          confidence: 0.9,
          isRealTime: true
        })));
        console.log('‚úÖ Web RAG:', webData.sources.length, 'resultados');
      }
      
      // 2. BUSCA EM APIS EXTERNAS (se necess√°rio)
      if (this.needsExternalAPIs(question, context)) {
        const externalResults = await this.searchExternalAPIs(question, context);
        results.push(...externalResults);
        console.log('üîó APIs Externas:', externalResults.length, 'resultados');
      }
      
      // 3. BUSCA EM MEM√ìRIA PERSISTENTE
      const memoryResults = await this.searchMemory(question, context);
      results.push(...memoryResults);
      console.log('üß† Mem√≥ria:', memoryResults.length, 'resultados');
      
    } catch (error) {
      console.error('‚ùå Erro na busca inteligente:', error);
    }
    
    return results.sort((a, b) => (b.confidence || 0) - (a.confidence || 0));
  }

  /**
   * GERA√á√ÉO DE RESPOSTA ADAPTATIVA
   */
  private async generateAdaptiveResponse(
    query: AdaptiveQuery,
    context: any,
    searchResults: any[]
  ): Promise<{ answer: string; confidence: number; sources: string[] }> {
    
    const adaptivePrompt = `
Voc√™ √© o Guat√°, uma capivara inteligente e adaptativa que √© o guia tur√≠stico oficial de Mato Grosso do Sul.

PERSONALIDADE ADAPTATIVA:
- Capivara carinhosa que aprende com cada intera√ß√£o
- Respostas personalizadas baseadas no contexto do usu√°rio
- Sempre busca informa√ß√µes atualizadas e relevantes
- Aprende as prefer√™ncias e adapta o estilo de resposta
- Usa insights de aprendizado para melhorar continuamente

CONTEXTO ATUAL:
- Tipo de pergunta: ${context.questionType}
- Inten√ß√£o: ${context.userIntent}
- Contexto geogr√°fico: ${context.geographicContext}
- N√≠vel de detalhe: ${context.detailLevel}
- Prefer√™ncias impl√≠citas: ${context.implicitPreferences.join(', ')}

INFORMA√á√ïES ENCONTRADAS:
${searchResults.map((result, index) => 
  `${index + 1}. ${result.title || 'Fonte'}: ${result.content || result.snippet || ''}`
).join('\n\n')}

HIST√ìRICO DA CONVERSA:
${query.conversationHistory?.join(' | ') || 'Primeira intera√ß√£o'}

INSTRU√á√ïES ADAPTATIVAS:
1. SEMPRE se apresente primeiro: "ü¶¶ Ol√°! Eu sou o Guat√°, sua capivara guia de turismo de Mato Grosso do Sul!"
2. Adapte sua resposta ao contexto e prefer√™ncias do usu√°rio
3. Use informa√ß√µes atualizadas da web quando dispon√≠vel
4. Seja envolvente e conte hist√≥rias interessantes
5. Aprenda com cada intera√ß√£o para melhorar
6. Sempre termine engajando o usu√°rio
7. Mostre que voc√™ est√° aprendendo e evoluindo

PERGUNTA DO USU√ÅRIO: ${query.question}

Responda de forma inteligente, adaptativa e envolvente:`;

    try {
      const result = await generateContent(adaptivePrompt);
      
      if (result.ok) {
        const sources = searchResults
          .map(r => r.source || 'web')
          .filter((source, index, self) => self.indexOf(source) === index);
        
        return {
          answer: result.text,
          confidence: 0.9,
          sources
        };
      } else {
        throw new Error(result.error || 'Erro na gera√ß√£o');
      }
    } catch (error) {
      console.error('‚ùå Erro na gera√ß√£o adaptativa:', error);
      
      return {
        answer: "ü¶¶ Ol√°! Eu sou o Guat√°, sua capivara guia de turismo de Mato Grosso do Sul! Estou aprendendo e melhorando a cada intera√ß√£o. Como posso te ajudar hoje?",
        confidence: 0.6,
        sources: ['fallback']
      };
    }
  }

  /**
   * APRENDIZADO E MELHORIA CONT√çNUA
   */
  private async learnFromInteraction(
    query: AdaptiveQuery, 
    response: any
  ): Promise<LearningInsights> {
    
    const learningPrompt = `
Analise esta intera√ß√£o para identificar oportunidades de aprendizado:

PERGUNTA: "${query.question}"
RESPOSTA: "${response.answer}"
CONTEXTO: ${JSON.stringify(query.userPreferences || {}, null, 2)}

Identifique:
1. Tipo de pergunta e padr√µes
2. Inten√ß√£o do usu√°rio
3. Lacunas de conhecimento
4. Sugest√µes de melhoria
5. Relev√¢ncia do contexto

Responda em JSON:
{
  "questionType": "string",
  "userIntent": "string",
  "knowledgeGaps": ["string"],
  "improvementSuggestions": ["string"],
  "contextRelevance": 0.0-1.0
}`;

    try {
      const result = await generateContent(learningPrompt);
      if (result.ok) {
        return JSON.parse(result.text);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro no aprendizado:', error);
    }
    
    return {
      questionType: 'general',
      userIntent: 'information_seeking',
      knowledgeGaps: [],
      improvementSuggestions: ['Melhorar an√°lise de contexto'],
      contextRelevance: 0.5
    };
  }

  /**
   * ATUALIZA√á√ÉO DE MEM√ìRIA
   */
  private async updateMemory(
    query: AdaptiveQuery,
    response: any,
    learning: LearningInsights
  ): Promise<MemoryUpdate[]> {
    
    const updates: MemoryUpdate[] = [];
    
    // Atualizar prefer√™ncias do usu√°rio
    if (learning.contextRelevance > this.LEARNING_THRESHOLD) {
      updates.push({
        type: 'preference',
        content: `Usu√°rio interessado em: ${learning.questionType}`,
        confidence: learning.contextRelevance,
        source: 'adaptive_learning'
      });
    }
    
    // Registrar padr√µes de comportamento
    if (learning.behaviorPatterns && learning.behaviorPatterns.length > 0) {
      updates.push({
        type: 'pattern',
        content: `Padr√£o identificado: ${learning.behaviorPatterns.join(', ')}`,
        confidence: 0.8,
        source: 'pattern_analysis'
      });
    }
    
    // Salvar fatos importantes
    if (learning.knowledgeGaps.length === 0 && response.confidence > 0.8) {
      updates.push({
        type: 'fact',
        content: `Fato verificado: ${query.question}`,
        confidence: response.confidence,
        source: 'web_verification'
      });
    }
    
    return updates;
  }

  /**
   * VERIFICA SE PRECISA DE APIs EXTERNAS
   */
  private needsExternalAPIs(question: string, context: any): boolean {
    const externalKeywords = ['pre√ßo', 'custo', 'valor', 'quanto', 'barato', 'caro', 'promo√ß√£o'];
    return externalKeywords.some(keyword => 
      question.toLowerCase().includes(keyword)
    );
  }

  /**
   * BUSCA EM APIs EXTERNAS
   */
  private async searchExternalAPIs(question: string, context: any): Promise<any[]> {
    // Implementar busca em APIs externas quando necess√°rio
    return [];
  }

  /**
   * BUSCA EM MEM√ìRIA PERSISTENTE
   */
  private async searchMemory(question: string, context: any): Promise<any[]> {
    // Implementar busca em mem√≥ria persistente
    return [];
  }
}

// Exportar inst√¢ncia √∫nica
export const guataAdaptiveService = new GuataAdaptiveService();
export type { AdaptiveQuery, AdaptiveResponse, UserPreferences, LearningInsights, MemoryUpdate };





