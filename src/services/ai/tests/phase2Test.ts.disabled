/**
 * Teste da Fase 2: APIs + Scraping
 * Testa a integra√ß√£o das APIs gratuitas e web scraping seletivo
 */

import { freeAPIsService } from '../apis/freeAPIsService';
import { selectiveScrapingService } from '../scraping/selectiveScrapingService';
import { guataInteligenteService } from '../guataInteligenteService';

async function testPhase2() {
  console.log('üß™ TESTANDO FASE 2: APIs + SCRAPING');
  console.log('=====================================\n');

  // Teste 1: APIs Gratuitas
  console.log('1Ô∏è‚É£ Testando APIs Gratuitas...');
  
  try {
    // Teste Wikipedia
    const wikiResult = await freeAPIsService.getWikipediaInfo('Mato Grosso do Sul');
    console.log('üìö Wikipedia:', wikiResult.success ? '‚úÖ Funcionando' : '‚ùå Erro');
    if (wikiResult.success) {
      console.log('   - T√≠tulo:', wikiResult.data?.title);
      console.log('   - Extract:', wikiResult.data?.extract?.substring(0, 100) + '...');
    }

    // Teste IBGE
    const ibgeResult = await freeAPIsService.getIBGEData();
    console.log('üìä IBGE:', ibgeResult.success ? '‚úÖ Funcionando' : '‚ùå Erro');
    if (ibgeResult.success) {
      console.log('   - Popula√ß√£o:', ibgeResult.data?.population?.toLocaleString());
      console.log('   - Regi√£o:', ibgeResult.data?.region);
    }

    // Teste Clima
    const weatherResult = await freeAPIsService.getWeatherData('Campo Grande');
    console.log('üå§Ô∏è Clima:', weatherResult.success ? '‚úÖ Funcionando' : '‚ùå Erro');
    if (weatherResult.success) {
      console.log('   - Temperatura:', weatherResult.data?.temperature + '¬∞C');
      console.log('   - Condi√ß√£o:', weatherResult.data?.condition);
    }

    // Teste DuckDuckGo
    const ddgResult = await freeAPIsService.getDuckDuckGoInfo('Bonito MS');
    console.log('üîç DuckDuckGo:', ddgResult.success ? '‚úÖ Funcionando' : '‚ùå Erro');
    if (ddgResult.success) {
      console.log('   - T√≠tulo:', ddgResult.data?.title);
      console.log('   - Abstract:', ddgResult.data?.abstract?.substring(0, 100) + '...');
    }

    // Teste m√∫ltiplas APIs
    const multiResult = await freeAPIsService.getMultiSourceInfo('Pantanal');
    console.log('üîÑ M√∫ltiplas APIs:', multiResult.errors.length === 0 ? '‚úÖ Funcionando' : '‚ö†Ô∏è Com erros');
    console.log('   - Erros:', multiResult.errors.length);
    console.log('   - Fontes dispon√≠veis:', Object.keys(multiResult).filter(k => k !== 'errors').length);

  } catch (error) {
    console.error('‚ùå Erro nos testes de APIs:', error);
  }

  console.log('\n2Ô∏è‚É£ Testando Web Scraping...');
  
  try {
    // Teste scraping individual
    const bioparqueResult = await selectiveScrapingService.scrapeSite('bioparque', 'hor√°rio');
    console.log('üèõÔ∏è Bioparque:', bioparqueResult.success ? '‚úÖ Funcionando' : '‚ùå Erro');
    if (bioparqueResult.success && bioparqueResult.data) {
      console.log('   - Dados encontrados:', bioparqueResult.data.length);
      console.log('   - Primeiro resultado:', bioparqueResult.data[0]?.title);
    }

    // Teste m√∫ltiplos sites
    const multiScraping = await selectiveScrapingService.scrapeMultipleSites('turismo');
    console.log('üåê M√∫ltiplos Sites:', multiScraping.results.length > 0 ? '‚úÖ Funcionando' : '‚ùå Erro');
    console.log('   - Sites processados:', multiScraping.totalSources);
    console.log('   - Resultados:', multiScraping.results.length);
    console.log('   - Erros:', multiScraping.errors.length);

    // Teste com prioridade
    const priorityScraping = await selectiveScrapingService.scrapeWithPriority('Bonito');
    console.log('‚≠ê Scraping com Prioridade:', priorityScraping.length > 0 ? '‚úÖ Funcionando' : '‚ùå Erro');
    console.log('   - Resultados ordenados:', priorityScraping.length);
    if (priorityScraping.length > 0) {
      console.log('   - Maior confian√ßa:', Math.round(priorityScraping[0].confidence * 100) + '%');
    }

    // Estat√≠sticas
    const stats = selectiveScrapingService.getStats();
    console.log('üìä Estat√≠sticas de Scraping:');
    console.log('   - Sites configurados:', stats.totalSites);
    console.log('   - Entradas em cache:', stats.cachedEntries);
    console.log('   - √öltima atualiza√ß√£o:', stats.lastUpdate.toLocaleString());

  } catch (error) {
    console.error('‚ùå Erro nos testes de scraping:', error);
  }

  console.log('\n3Ô∏è‚É£ Testando Integra√ß√£o Completa...');
  
  try {
    // Teste do Guat√° Inteligente com dados externos
    const smartQuery = await guataInteligenteService.testQuery('Qual o clima em Campo Grande hoje?');
    console.log('üß† Guat√° Inteligente:', smartQuery.confidence > 0 ? '‚úÖ Funcionando' : '‚ùå Erro');
    console.log('   - Confian√ßa:', smartQuery.confidence + '%');
    console.log('   - Fontes:', smartQuery.metadata.sources.length);
    console.log('   - Tempo de processamento:', smartQuery.metadata.processingTime + 'ms');
    console.log('   - Resposta:', smartQuery.message.substring(0, 150) + '...');

    // Health check completo
    const health = await guataInteligenteService.healthCheck();
    console.log('üè• Health Check:');
    console.log('   - Status geral:', health.status);
    console.log('   - APIs:', health.components.apis ? '‚úÖ' : '‚ùå');
    console.log('   - Scraping:', health.components.scraping ? '‚úÖ' : '‚ùå');
    console.log('   - Base de conhecimento:', health.components.knowledgeBase ? '‚úÖ' : '‚ùå');

  } catch (error) {
    console.error('‚ùå Erro no teste de integra√ß√£o:', error);
  }

  console.log('\n4Ô∏è‚É£ Testando Performance...');
  
  try {
    const startTime = Date.now();
    
    // Teste de performance com m√∫ltiplas consultas
    const queries = [
      'Clima em Campo Grande',
      'Bioparque hor√°rio',
      'Bonito atra√ß√µes',
      'Pantanal turismo'
    ];

    const results = await Promise.allSettled(
      queries.map(query => guataInteligenteService.testQuery(query))
    );

    const endTime = Date.now();
    const totalTime = endTime - startTime;
    const avgTime = totalTime / queries.length;

    console.log('‚ö° Performance:');
    console.log('   - Tempo total:', totalTime + 'ms');
    console.log('   - Tempo m√©dio por consulta:', Math.round(avgTime) + 'ms');
    console.log('   - Consultas bem-sucedidas:', results.filter(r => r.status === 'fulfilled').length);
    console.log('   - Taxa de sucesso:', Math.round((results.filter(r => r.status === 'fulfilled').length / queries.length) * 100) + '%');

  } catch (error) {
    console.error('‚ùå Erro no teste de performance:', error);
  }

  console.log('\n‚úÖ TESTE DA FASE 2 CONCLU√çDO!');
  console.log('=====================================');
}

// Executar teste se chamado diretamente
if (require.main === module) {
  testPhase2().catch(console.error);
}

export { testPhase2 }; 