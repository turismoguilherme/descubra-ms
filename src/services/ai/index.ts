
import { KnowledgeItem } from "@/types/ai";
import { guataClient } from "./client/guataClient";
import { knowledgeService } from "./knowledge/knowledgeService";
import { geminiClient } from "@/config/gemini";
import { GuataResponse, GuataUserInfo } from "./types/guataTypes";
import { OfficialSources } from "./knowledge/knowledgeService";

/**
 * Servi√ßo principal do Guat√° que coordena os demais m√≥dulos
 */
export class GuataService {
  // √öltimo prompt usado (para debugging)
  private lastPrompt: string = "";

  /**
   * Envia uma pergunta para a IA Guat√° e retorna a resposta
   */
  async askQuestion(
    prompt: string,
    knowledgeBase?: KnowledgeItem[],
    userInfo?: GuataUserInfo
  ): Promise<GuataResponse> {
    try {
      this.lastPrompt = prompt;
      
      // Filtrar a base de conhecimento para itens relevantes
      let relevantKnowledge: KnowledgeItem[] = knowledgeService.filterRelevantKnowledge(prompt, knowledgeBase);
      
      // Buscar informa√ß√µes adicionais de fontes oficiais
      const officialInfo = await knowledgeService.fetchOfficialInformation(prompt);
      
      // Se temos informa√ß√µes oficiais, adicion√°-las √† base de conhecimento
      if (officialInfo) {
        console.log("ü¶¶ Guat√°: Informa√ß√µes oficiais encontradas:", officialInfo.source);
        relevantKnowledge.push({
          id: `official-${Date.now()}`,
          title: "Informa√ß√£o Oficial",
          content: officialInfo.content,
          category: "oficial",
          source: officialInfo.source,
          lastUpdated: new Date().toISOString()
        });
      }
      
      // Chamar o cliente Guat√° para obter a resposta da IA
      return await guataClient.sendQuery(prompt, relevantKnowledge, userInfo);
    } catch (error) {
      console.error("ü¶¶ Guat√°: Erro no servi√ßo principal:", error);
      
      // Usar Gemini diretamente como fallback
      console.log("ü¶¶ Guat√°: Usando Gemini como fallback ap√≥s erro");
      
      const fallbackPrompt = `
Voc√™ √© o Guat√°, o assistente virtual de turismo do Mato Grosso do Sul, representado por uma capivara simp√°tica usando chap√©u de safari.

Contexto dispon√≠vel:
${knowledgeBase?.map(item => `${item.title}: ${item.content}`).join('\n')}

Informa√ß√µes do usu√°rio:
${userInfo ? JSON.stringify(userInfo, null, 2) : 'N√£o dispon√≠vel'}

Pergunta do usu√°rio: ${prompt}

Responda de forma amig√°vel e natural, usando o conhecimento fornecido sobre MS. Se n√£o tiver informa√ß√µes espec√≠ficas, seja honesto e sugira alternativas ou indique onde encontrar a informa√ß√£o.`;

      try {
        const geminiResponse = await geminiClient.generateContent(fallbackPrompt);
        return {
          resposta: geminiResponse,
          response: geminiResponse,
          source: 'gemini-fallback'
        };
      } catch (geminiError) {
        console.error("ü¶¶ Guat√°: Erro no fallback Gemini:", geminiError);
        return {
          resposta: "Desculpe, estou com dificuldades t√©cnicas no momento. Por favor, tente novamente em alguns instantes.",
          response: "Desculpe, estou com dificuldades t√©cnicas no momento. Por favor, tente novamente em alguns instantes.",
          source: 'error'
        };
      }
    }
  }
}

// Exportar uma √∫nica inst√¢ncia do servi√ßo e os tipos necess√°rios
export const guataService = new GuataService();
export { OfficialSources };
export type { GuataResponse, GuataUserInfo };
