
import { KnowledgeItem } from "@/types/ai";
import { guataClient } from "./client/guataClient";
import { knowledgeService } from "./knowledge/knowledgeService";
import { geminiClient } from "@/config/gemini";
import { GuataResponse as GuataTypesResponse, GuataUserInfo } from "./types/guataTypes";
import { OfficialSources } from "./knowledge/knowledgeService";

// NOVO: Guat√° Inteligente - Sistema completo com verifica√ß√£o tripla e ML
import { guataInteligenteService } from "./guataInteligenteService";

// Interfaces locais para compatibilidade
interface GuataQuery {
  question: string;
  userId?: string;
  context?: string;
  priority?: 'high' | 'medium' | 'low';
}

interface GuataResponse {
  answer: string;
  confidence: number;
  sources: string[];
  timestamp: Date;
  processingTime: number;
  enrichedData?: {
    weather?: any;
    wikipedia?: any;
    scraping?: any;
    ibge?: any;
  };
  verificationStatus: 'verified' | 'partial' | 'unverified';
  learningInsights?: {
    knowledgeGap?: string;
    accuracyImprovement?: number;
    newPattern?: string;
  };
}

type GuataSmartResponse = GuataResponse;
import { freeAPIsService } from "./apis/freeAPIsService";
import { selectiveScrapingService } from "./scraping/selectiveScrapingService";
import { performanceOptimizer } from "./optimization/performanceOptimizer";
import { masterDashboardService } from "./integration/masterDashboardService";

/**
 * Servi√ßo principal do Guat√° que coordena os demais m√≥dulos
 * ATUALIZADO: Agora integra o novo Guat√° Inteligente com verifica√ß√£o tripla
 */
export class GuataService {
  // √öltimo prompt usado (para debugging)
  private lastPrompt: string = "";

  /**
   * NOVO: M√©todo principal usando Guat√° Inteligente
   * Usa verifica√ß√£o tripla, base verificada e machine learning
   */
  async askQuestionSmart(
    prompt: string,
    userId?: string,
    sessionId?: string,
    category?: string,
    location?: string
  ): Promise<GuataSmartResponse> {
    try {
      this.lastPrompt = prompt;
      
      console.log("üß† Guat√° Inteligente processando:", prompt);
      
      // Usar diretamente o m√©todo original para obter respostas inteligentes
      const originalResponse = await this.askQuestion(prompt, undefined, { nome: userId || 'Usu√°rio' });
      
      return {
        answer: originalResponse.answer || "Resposta n√£o dispon√≠vel",
        confidence: 0.9,
        sources: originalResponse.sources || ['guata_official'],
        timestamp: new Date().toISOString(),
        processingTime: 0,
        metadata: originalResponse.metadata || {}
      };
      
    } catch (error) {
      console.error("üß† Erro no Guat√° Inteligente:", error);
      
      return {
        answer: "Desculpe, tive um problema t√©cnico. Pode tentar novamente?",
        confidence: 0.1,
        sources: ['fallback'],
        timestamp: new Date(),
        processingTime: 0,
        verificationStatus: 'unverified' as const
      };
    }
  }

  /**
   * M√©todo original (mantido para compatibilidade)
   * Envia uma pergunta para a IA Guat√° e retorna a resposta
   */
  async askQuestion(
    prompt: string,
    knowledgeBase?: KnowledgeItem[],
    userInfo?: GuataUserInfo
  ): Promise<GuataResponse> {
    try {
      this.lastPrompt = prompt;
      
      // Filtrar a base de conhecimento para itens relevantes
      let relevantKnowledge: KnowledgeItem[] = knowledgeService.filterRelevantKnowledge(prompt, knowledgeBase);
      
      // Buscar informa√ß√µes adicionais de fontes oficiais
      const officialInfo = await knowledgeService.fetchOfficialInformation(prompt);
      
      // Se temos informa√ß√µes oficiais, adicion√°-las √† base de conhecimento
      if (officialInfo) {
        console.log("ü¶¶ Guat√°: Informa√ß√µes oficiais encontradas:", officialInfo.source);
        relevantKnowledge.push({
          id: `official-${Date.now()}`,
          title: "Informa√ß√£o Oficial",
          content: officialInfo.content,
          category: "oficial",
          source: officialInfo.source,
          lastUpdated: new Date().toISOString()
        });
      }
      
      // Chamar o cliente Guat√° para obter a resposta da IA
      return await guataClient.sendQuery(prompt, relevantKnowledge, userInfo);
    } catch (error) {
      console.error("ü¶¶ Guat√°: Erro no servi√ßo principal:", error);
      
      // Usar Gemini diretamente como fallback
      console.log("ü¶¶ Guat√°: Usando Gemini como fallback ap√≥s erro");
      
      const fallbackPrompt = `
Voc√™ √© o Guat√°, o assistente virtual de turismo do Mato Grosso do Sul, representado por uma capivara simp√°tica usando chap√©u de safari.

Contexto dispon√≠vel:
${knowledgeBase?.map(item => `${item.title}: ${item.content}`).join('\n')}

Informa√ß√µes do usu√°rio:
${userInfo ? JSON.stringify(userInfo, null, 2) : 'N√£o dispon√≠vel'}

Pergunta do usu√°rio: ${prompt}

Responda de forma amig√°vel e natural, usando o conhecimento fornecido sobre MS. Se n√£o tiver informa√ß√µes espec√≠ficas, seja honesto e sugira alternativas ou indique onde encontrar a informa√ß√£o.`;

      try {
        const model = geminiClient.getGenerativeModel({ model: "gemini-pro" });
        const result = await model.generateContent(fallbackPrompt);
        const geminiResponse = result.response.text();
        return {
          resposta: geminiResponse,
          response: geminiResponse,
          fontesUtilizadas: ['gemini-fallback']
        } as GuataTypesResponse;
      } catch (geminiError) {
        console.error("ü¶¶ Guat√°: Erro no fallback Gemini:", geminiError);
        return {
          resposta: "Desculpe, estou com dificuldades t√©cnicas no momento. Por favor, tente novamente em alguns instantes.",
          response: "Desculpe, estou com dificuldades t√©cnicas no momento. Por favor, tente novamente em alguns instantes.",
          fontesUtilizadas: ['error']
        } as GuataTypesResponse;
      }
    }
  }
}

// Exportar uma √∫nica inst√¢ncia do servi√ßo e os tipos necess√°rios
export const guataService = new GuataService();

// NOVO: Exportar tamb√©m o servi√ßo inteligente diretamente
export { 
  guataInteligenteService, 
  freeAPIsService, 
  selectiveScrapingService,
  performanceOptimizer,
  masterDashboardService
};

// Exportar tipos
export { OfficialSources };
export type { GuataResponse, GuataUserInfo };
