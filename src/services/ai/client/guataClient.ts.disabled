import { supabase } from "@/integrations/supabase/client";
import { KnowledgeItem } from "../knowledge/knowledgeTypes";
import { GuataUserInfo, GuataResponse } from "../types/guataTypes";
import { geminiClient, generateContent } from "@/config/gemini";
import { searchMSKnowledge } from "../knowledge/msKnowledgeBase";
import { addPersonalityToPrompt, detectContext, detectLanguage } from "../personality/guataPersonality";
import { webSearchService } from "../search/webSearchService";
import { dynamicWebSearchService } from "../search/dynamicWebSearchService";
import { socialMediaService } from "../social/socialMediaService";
import { reservationService } from "@/services/reservations/reservationService";
import { emergencyService } from "@/services/emergency/emergencyService";
import { itineraryService } from "@/services/itineraries/itineraryService";
import { ItineraryRequest } from "@/services/itineraries/itineraryTypes";
import { mlService } from "@/services/ml/mlService";
import { informationVerificationService } from "../verification/informationVerificationService";

/**
 * Cliente para comunica√ß√£o com a API do Guat√°
 */
export class GuataClient {
  private currentThreadId: string | null = null;
  private currentConversation: {
    introduced: boolean;
    context: string;
    messages: { role: 'user' | 'assistant', content: string }[];
  } = {
    introduced: false,
    context: '',
    messages: []
  };

  /**
   * Envia uma pergunta para a API Guat√° usando Gemini
   */
  async sendQuery(
    prompt: string,
    knowledgeBase?: KnowledgeItem[],
    userInfo?: GuataUserInfo
  ): Promise<GuataResponse> {
    try {
      console.log("ü¶¶ Guat√°: Iniciando chamada com Gemini API");
      
      // Preparar contexto da base de conhecimento
      let knowledgeContextInfo = "";
      if (knowledgeBase?.length > 0) {
        knowledgeContextInfo = knowledgeBase.map(item => `
T√≠tulo: ${item.title}
Categoria: ${item.category}
Conte√∫do: ${item.content}
${item.source ? `Fonte: ${item.source}` : ''}
---`).join('\n');
      }

      // Preparar informa√ß√µes do usu√°rio
      let userContext = "";
      if (userInfo) {
        userContext = `
Informa√ß√µes do usu√°rio:
${userInfo.nome ? `Nome: ${userInfo.nome}` : ''}
${userInfo.localizacao ? `Localiza√ß√£o: ${userInfo.localizacao}` : ''}
${userInfo.interesses ? `Interesses: ${userInfo.interesses.join(', ')}` : ''}
${userInfo.tipoViagem ? `Tipo de viagem: ${userInfo.tipoViagem}` : ''}
${userInfo.duracao ? `Dura√ß√£o: ${userInfo.duracao}` : ''}
${userInfo.orcamento ? `Or√ßamento: ${userInfo.orcamento}` : ''}
${userInfo.acessibilidade ? `Acessibilidade: ${userInfo.acessibilidade}` : ''}
${userInfo.idade ? `Idade: ${userInfo.idade}` : ''}
${userInfo.viajandoCom ? `Viajando com: ${userInfo.viajandoCom}` : ''}
---`;
      }

      // Buscar informa√ß√µes espec√≠ficas de MS
      const context = detectContext(prompt);
      const msKnowledge = searchMSKnowledge(prompt, context as any);
      
      let msContextInfo = "";
      if (msKnowledge.length > 0) {
        msContextInfo = `
INFORMA√á√ïES ESPEC√çFICAS DE MS (VERIFICADAS E ATUALIZADAS):
${msKnowledge.map(item => `
${item.category.toUpperCase()}: ${item.name}
Localiza√ß√£o: ${item.location}
Descri√ß√£o: ${item.description}
${item.contact ? `Contato: ${item.contact}` : ''}
${item.website ? `Website: ${item.website}` : ''}
${item.tripAdvisorRating ? `TripAdvisor: ${item.tripAdvisorRating}/5` : item.rating ? `Avalia√ß√£o: ${item.rating}/5` : ''}
${item.priceRange ? `Faixa de pre√ßo: ${item.priceRange}` : ''}
${item.specialties ? `Especialidades: ${item.specialties.join(', ')}` : ''}
${item.isPartner ? '‚≠ê PARCEIRO DA PLATAFORMA' : ''}
${item.cadasturCode ? `Cadastur: ${item.cadasturCode}` : ''}
---`).join('\n')}`;
      }

      // Buscar informa√ß√µes atualizadas da web usando sistema din√¢mico inteligente
      let webContextInfo = "";
      try {
        console.log('üîç Guat√°: Iniciando busca din√¢mica inteligente...');
        const dynamicAnalysis = await dynamicWebSearchService.search(prompt);
        
        if (dynamicAnalysis.confidence > 50) {
          webContextInfo = `
üîç INFORMA√á√ïES INTELIGENTES DA WEB (${dynamicAnalysis.confidence}% confian√ßa):
${dynamicAnalysis.sources.length > 0 ? `Fontes consultadas: ${dynamicAnalysis.sources.join(', ')}` : ''}

‚úÖ MELHOR RESPOSTA ENCONTRADA:
${dynamicAnalysis.bestAnswer}

üìä AN√ÅLISE DETALHADA:
${dynamicAnalysis.results.slice(0, 3).map(result => `
FONTE: ${result.source}
CONFIAN√áA: ${result.confidence}%
CATEGORIAS: ${result.categories.join(', ')}
OFICIAL: ${result.isOfficial ? '‚úÖ' : '‚ùå'}
---`).join('\n')}
---`;
          
          console.log(`‚úÖ Guat√°: Busca din√¢mica conclu√≠da (${dynamicAnalysis.confidence}% confian√ßa)`);
        } else {
          console.log('‚ö†Ô∏è Guat√°: Busca din√¢mica com baixa confian√ßa, usando fallback');
          // Fallback para busca web tradicional
          const webResults = await webSearchService.search(prompt);
          if (webResults.length > 0) {
            webContextInfo = `
INFORMA√á√ïES ATUALIZADAS DA WEB (FONTES CONFI√ÅVEIS):
${webResults.slice(0, 3).map(result => `
FONTE: ${result.source || 'Web'}
T√çTULO: ${result.title}
CONTE√öDO: ${result.content}
CONFIAN√áA: ${Math.round(result.confidence * 100)}%
---`).join('\n')}`;
          }
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Erro na busca din√¢mica:', error);
        // Fallback para busca web tradicional
        try {
          const webResults = await webSearchService.search(prompt);
          if (webResults.length > 0) {
            webContextInfo = `
INFORMA√á√ïES ATUALIZADAS DA WEB (FONTES CONFI√ÅVEIS):
${webResults.slice(0, 3).map(result => `
FONTE: ${result.source || 'Web'}
T√çTULO: ${result.title}
CONTE√öDO: ${result.content}
CONFIAN√áA: ${Math.round(result.confidence * 100)}%
---`).join('\n')}`;
          }
        } catch (fallbackError) {
          console.log('‚ö†Ô∏è Erro no fallback da busca web:', fallbackError);
        }
      }

      // Buscar informa√ß√µes de redes sociais (INTERNO - n√£o mostrar ao usu√°rio)
      let socialContextInfo = "";
      try {
        const socialResults = await socialMediaService.getRecentPosts(prompt);
        if (socialResults.length > 0) {
          socialContextInfo = `
INFORMA√á√ïES INTERNAS (N√ÉO MENCIONAR AO USU√ÅRIO):
${socialResults.slice(0, 2).map(result => `
FONTE INTERNA: ${result.source?.name || 'Instagram'}
T√çTULO: ${result.title}
CONTE√öDO: ${result.content}
TIPO: ${result.category}
---`).join('\n')}`;
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Erro na busca de redes sociais:', error);
      }

      // Buscar parceiros dispon√≠veis para reservas (APENAS REAIS)
      let reservationContextInfo = "";
      try {
        if (prompt.toLowerCase().includes('reserva') || prompt.toLowerCase().includes('agendar') || 
            prompt.toLowerCase().includes('hotel') || prompt.toLowerCase().includes('restaurante')) {
          
          // Verificar se h√° parceiros reais dispon√≠veis
          const hasPartners = await reservationService.hasPartners();
          const partnerStats = await reservationService.getPartnerStats();
          
          if (hasPartners && partnerStats.verifiedPartners > 0) {
            // S√≥ mostrar parceiros se existirem e forem verificados
            const partners = await reservationService.getAvailablePartners();
            if (partners.length > 0) {
              reservationContextInfo = `
PARCEIROS VERIFICADOS DISPON√çVEIS:
${partners.map(partner => `
${partner.type.toUpperCase()}: ${partner.name}
Localiza√ß√£o: ${partner.location}
Descri√ß√£o: ${partner.description}
Contato: ${partner.contactInfo.phone}
Email: ${partner.contactInfo.email}
Pre√ßo: ${partner.pricing.minPrice}-${partner.pricing.maxPrice} ${partner.pricing.currency}
Disponibilidade: ${partner.availability.hours}
---`).join('\n')}`;
            }
          } else {
            // Se n√£o h√° parceiros, informar de forma transparente
            reservationContextInfo = `
INFORMA√á√ÉO SOBRE PARCEIROS:
- Atualmente n√£o temos parceiros oficiais na plataforma
- Quando tivermos parceiros verificados, eles ser√£o priorizados
- Para reservas, recomendo consultar sites oficiais ou ag√™ncias locais
---`;
          }
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Erro na verifica√ß√£o de parceiros:', error);
      }

      // Buscar alertas de emerg√™ncia e contatos
      let emergencyContextInfo = "";
      try {
        // Detectar localiza√ß√£o mencionada na pergunta
        const locationKeywords = ['bonito', 'campo grande', 'corumb√°', 'pantanal', 'ms', 'mato grosso do sul'];
        const mentionedLocation = locationKeywords.find(loc => 
          prompt.toLowerCase().includes(loc)
        ) || 'Mato Grosso do Sul';

        const emergencyAlerts = await emergencyService.getActiveAlerts(mentionedLocation);
        const emergencyContacts = await emergencyService.getEmergencyContacts(mentionedLocation);
        const safetyRecommendations = await emergencyService.getTouristSafetyRecommendations(mentionedLocation);

        if (emergencyAlerts.success && (emergencyAlerts.weather?.length || emergencyAlerts.health?.length || emergencyAlerts.safety?.length)) {
          emergencyContextInfo = `
üö® ALERTAS DE EMERG√äNCIA ATIVOS PARA ${mentionedLocation.toUpperCase()}:
${emergencyAlerts.weather?.map(alert => `
CLIMA: ${alert.description}
Severidade: ${alert.severity}
Recomenda√ß√µes: ${alert.recommendations.join(', ')}
---`).join('\n') || ''}
${emergencyAlerts.health?.map(alert => `
SA√öDE: ${alert.description}
Severidade: ${alert.severity}
Preven√ß√£o: ${alert.prevention.join(', ')}
---`).join('\n') || ''}
${emergencyAlerts.safety?.map(alert => `
SEGURAN√áA: ${alert.description}
Severidade: ${alert.severity}
√Åreas afetadas: ${alert.affectedAreas.join(', ')}
Recomenda√ß√µes: ${alert.recommendations.join(', ')}
---`).join('\n') || ''}

üìû CONTATOS DE EMERG√äNCIA:
${emergencyContacts.map(contact => `
${contact.category.toUpperCase()}: ${contact.name}
Telefone: ${contact.phone}
${contact.address ? `Endere√ßo: ${contact.address}` : ''}
${contact.available24h ? '24h' : ''}
---`).join('\n')}

üõ°Ô∏è RECOMENDA√á√ïES DE SEGURAN√áA:
${safetyRecommendations.join('\n')}
---`;
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Erro na busca de alertas de emerg√™ncia:', error);
      }

      // Buscar informa√ß√µes de roteiros din√¢micos
      let itineraryContextInfo = "";
      try {
        // Detectar se o usu√°rio est√° pedindo um roteiro
        const itineraryKeywords = ['roteiro', 'itiner√°rio', 'programa', 'agenda', 'cronograma', 'planejar', 'organizar'];
        const isAskingForItinerary = itineraryKeywords.some(keyword => 
          prompt.toLowerCase().includes(keyword)
        );

        if (isAskingForItinerary) {
          // Extrair informa√ß√µes do prompt para gerar roteiro
          const interests = this.extractInterests(prompt);
          const location = this.extractLocation(prompt);
          const duration = this.extractDuration(prompt);
          const budget = this.extractBudget(prompt);

          if (interests.length > 0 && location) {
            const itineraryRequest: ItineraryRequest = {
              destination: location,
              location: location,
              duration: duration || 3,
              interests: interests,
              budget: budget || 'moderate',
              startDate: new Date().toISOString(),
              groupSize: 2, // Default value
              accessibility: [] // Default value
            };

            const itineraryResponse = await itineraryService.generateItinerary(itineraryRequest);
            
            if (itineraryResponse.success && itineraryResponse.itinerary) {
              const itinerary = itineraryResponse.itinerary;
              itineraryContextInfo = `
üó∫Ô∏è ROTEIRO PERSONALIZADO GERADO:
T√≠tulo: ${itinerary.title}
Dura√ß√£o: ${itinerary.duration} dias
Interesses: ${itinerary.interests.join(', ')}
Or√ßamento: ${itinerary.budget}

ATRA√á√ïES INCLU√çDAS:
${itinerary.attractions.map(attraction => `
${attraction.priority.toUpperCase()}: ${attraction.name}
Localiza√ß√£o: ${attraction.location}
Tempo estimado: ${attraction.estimatedTime} horas
Custo estimado: R$ ${attraction.estimatedCost}
---`).join('\n')}

ROTA DI√ÅRIA:
${itinerary.route.filter(point => point.type === 'attraction').map(point => `
Dia ${point.day}: ${point.name}
Tempo: ${Math.round(point.estimatedTime / 60)} horas
Custo: R$ ${point.estimatedCost}
---`).join('\n')}
---`;
            }
          }
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Erro na gera√ß√£o de roteiro:', error);
      }

      // Buscar recomenda√ß√µes personalizadas do ML
      let mlContextInfo = "";
      try {
        const userId = userInfo?.nome ? `user-${userInfo.nome}` : 'default-user';
        
        // Registrar intera√ß√£o do usu√°rio
        if (msKnowledge.length > 0) {
          for (const item of msKnowledge.slice(0, 3)) {
            await mlService.recordInteraction({
              id: `interaction-${Date.now()}`,
              userId,
              category: item.category as any,
              itemId: item.id,
              itemName: item.name,
              rating: item.rating || 4,
              interactionType: 'view',
              timestamp: new Date().toISOString(),
              context: {
                location: userInfo?.localizacao,
                interests: userInfo?.interesses,
                budget: userInfo?.orcamento,
                groupSize: userInfo?.idade ? Number(userInfo.idade) : undefined
              }
            });
          }
        }

        // Gerar recomenda√ß√µes personalizadas
        const mlPrediction = await mlService.generateRecommendations(userId, {
          location: userInfo?.localizacao,
          interests: userInfo?.interesses,
          budget: userInfo?.orcamento,
          groupSize: userInfo?.idade ? Number(userInfo.idade) : undefined
        });

        if (mlPrediction.recommendations.length > 0) {
          mlContextInfo = `
ü§ñ RECOMENDA√á√ïES PERSONALIZADAS (IA):
Confian√ßa: ${Math.round(mlPrediction.confidence * 100)}%
Modelo: ${mlPrediction.modelUsed}

${mlPrediction.recommendations.slice(0, 5).map(rec => `
‚≠ê ${rec.itemName}
Categoria: ${rec.category}
Raz√£o: ${rec.reason}
Confian√ßa: ${Math.round(rec.confidence * 100)}%
---`).join('\n')}
---`;
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Erro no sistema de ML:', error);
      }

      // Preparar contexto mantendo hist√≥rico
      let contextInfo = "";
      
      // Adicionar apresenta√ß√£o apenas na primeira mensagem
      if (!this.currentConversation.introduced) {
        contextInfo += `Voc√™ √© o Guat√°, guia especializado em Mato Grosso do Sul. Mantenha suas respostas naturais e evite repetir sua apresenta√ß√£o.`;
        this.currentConversation.introduced = true;
      } else {
        contextInfo += `Continue a conversa naturalmente, sem se reapresentar.`;
      }

      // Adicionar hist√≥rico da conversa
      if (this.currentConversation.messages.length > 0) {
        contextInfo += "\n\nHist√≥rico da conversa:\n" + 
          this.currentConversation.messages.map(m => 
            `${m.role === 'user' ? 'Visitante' : 'Guat√°'}: ${m.content}`
          ).join('\n');
      }

      // Montar prompt completo com personalidade
      const basePrompt = `
Contexto sobre MS:
${contextInfo}

${msContextInfo}

${webContextInfo}

${socialContextInfo}

${reservationContextInfo}

${emergencyContextInfo}

${itineraryContextInfo}

${mlContextInfo}

Informa√ß√µes do usu√°rio:
${userContext}

Pergunta do usu√°rio: ${prompt}

IMPORTANTE: 
- Use as informa√ß√µes da busca din√¢mica inteligente como PRINCIPAL fonte
- Se a busca din√¢mica encontrou informa√ß√µes com alta confian√ßa (>70%), use essas informa√ß√µes
- Se n√£o tiver informa√ß√µes espec√≠ficas, seja honesto e sugira verificar diretamente
- Responda de forma amig√°vel e natural, usando o conhecimento fornecido sobre MS
- Se o usu√°rio perguntar sobre reservas ou agendamentos, mencione os parceiros dispon√≠veis e oriente sobre como proceder
- Se houver alertas de emerg√™ncia ativos, mencione-os e forne√ßa orienta√ß√µes de seguran√ßa
- Sempre inclua contatos de emerg√™ncia relevantes quando apropriado
- Se o usu√°rio pedir um roteiro ou itiner√°rio, use as informa√ß√µes geradas para fornecer um plano detalhado e personalizado
- Use as recomenda√ß√µes personalizadas do sistema de IA para sugerir atra√ß√µes e servi√ßos que combinem com o perfil do usu√°rio
- NUNCA invente informa√ß√µes - se n√£o souber algo, seja honesto
- NUNCA mencione fontes, sites ou redes sociais ao usu√°rio
- NUNCA diga "redes sociais", "Visit MS", "Fundtur MS" ou nomes de fontes
- Responda como se voc√™ soubesse naturalmente, sem revelar suas fontes`;

      // Detectar idioma da pergunta do usu√°rio
      const detectedLanguage = detectLanguage(prompt);
      const languageNames = {
        'pt': 'Portugu√™s',
        'en': 'English', 
        'es': 'Espa√±ol'
      };
      console.log(`üåç Guat√°: Idioma detectado: ${languageNames[detectedLanguage]}`);
      
      const fullPrompt = addPersonalityToPrompt(basePrompt, detectedLanguage);

      console.log("ü¶¶ Guat√°: Prompt preparado, chamando Gemini API...");

      // Usar Gemini API diretamente
      const response = await generateContent(fullPrompt);
      
      if (!response.ok) {
        // Se a API falhou, usar sistema de fallback inteligente
        console.log("‚ö†Ô∏è Guat√°: API falhou, usando fallback inteligente");
        const fallbackResponse = this.generateFallbackResponse(prompt);
        return {
          resposta: fallbackResponse,
          response: fallbackResponse
        };
      }

      console.log("ü¶¶ Guat√°: Resposta recebida com sucesso");

      // Limpar formata√ß√£o da resposta
      const cleanedResponse = this.cleanResponse(response.text);

      // ‚úÖ NOVO: Verificar informa√ß√µes antes de responder
      console.log("üîç Guat√°: Verificando informa√ß√µes...");
      const verificationResult = await informationVerificationService.verifyInformation(
        prompt, 
        cleanedResponse
      );

      // Se a verifica√ß√£o falhou, usar a resposta original mas com aviso
      let finalResponse = cleanedResponse;
      if (!verificationResult.crossVerificationPassed || verificationResult.confidenceScore < 0.3) {
        console.log("‚ö†Ô∏è Guat√°: Informa√ß√£o n√£o verificada, mas usando resposta original");
        // Usar a resposta original do Gemini em vez da gen√©rica
        finalResponse = cleanedResponse;
        
        // Se a resposta for muito gen√©rica, melhorar ela
        if (finalResponse.includes("Para informa√ß√µes espec√≠ficas sobre isso") || 
            finalResponse.includes("recomendo consultar fontes oficiais")) {
          // Gerar uma resposta mais inteligente baseada no contexto
          const improvedResponse = this.generateIntelligentResponse(prompt, cleanedResponse);
          finalResponse = improvedResponse;
        }
      }

      // Salvar mensagem no hist√≥rico
      this.currentConversation.messages.push(
        { role: 'user', content: prompt },
        { role: 'assistant', content: finalResponse }
      );

      // Limitar tamanho do hist√≥rico
      if (this.currentConversation.messages.length > 10) {
        this.currentConversation.messages = this.currentConversation.messages.slice(-10);
      }

      return {
        resposta: finalResponse,
        response: finalResponse
      };

    } catch (error) {
      console.error("ü¶¶ Guat√°: Erro ao processar pergunta:", error);
      
      return {
        resposta: "Desculpe, estou com dificuldades t√©cnicas no momento. Por favor, tente novamente em alguns instantes. Se o problema persistir, voc√™ pode entrar em contato com nosso suporte.",
        response: "Desculpe, estou com dificuldades t√©cnicas no momento. Por favor, tente novamente em alguns instantes. Se o problema persistir, voc√™ pode entrar em contato com nosso suporte.",
        erro: error instanceof Error ? error.message : "Erro desconhecido"
      };
    }
  }

  /**
   * Limpa formata√ß√£o da resposta removendo marcadores ** e excesso de quebras
   */
  private cleanResponse(text: string): string {
    return text
      .replace(/\*\*/g, '') // Remove marcadores **
      .replace(/\n{3,}/g, '\n\n') // Remove excesso de quebras de linha
      .trim();
  }

  /**
   * Gera resposta de fallback quando a API falha
   */
  private generateFallbackResponse(prompt: string): string {
    const lowerPrompt = prompt.toLowerCase();
    
    // Respostas espec√≠ficas para perguntas comuns
    if (lowerPrompt.includes('campo grande') || lowerPrompt.includes('capital')) {
      return `Campo Grande √© a capital de Mato Grosso do Sul e tem muito a oferecer! A cidade √© conhecida por suas √°reas verdes, como o Parque das Na√ß√µes Ind√≠genas, que √© perfeito para caminhadas e contato com a natureza. O centro hist√≥rico tem pr√©dios interessantes e a gastronomia local √© incr√≠vel, com pratos t√≠picos como o sob√°. Para quem gosta de cultura, h√° museus e centros culturais. A cidade tem uma vibe tranquila mas moderna, ideal para quem quer conhecer o MS!`;
    }
    
    if (lowerPrompt.includes('comida') || lowerPrompt.includes('gastronomia') || lowerPrompt.includes('culin√°ria')) {
      return `A gastronomia de Mato Grosso do Sul √© uma experi√™ncia incr√≠vel! A regi√£o tem uma mistura interessante de sabores, com influ√™ncias da culin√°ria japonesa (como o sob√° em Campo Grande) e pratos t√≠picos regionais. Voc√™ encontra desde restaurantes tradicionais at√© op√ß√µes mais modernas. A Feira Central de Campo Grande √© um lugar imperd√≠vel para experimentar a culin√°ria local!`;
    }
    
    if (lowerPrompt.includes('hotel') || lowerPrompt.includes('hospedagem')) {
      return `Em Campo Grande voc√™ encontra boas op√ß√µes de hospedagem! A maioria dos hot√©is fica no centro ou pr√≥ximo ao centro da cidade, o que facilita o acesso aos principais pontos tur√≠sticos. H√° op√ß√µes para todos os bolsos, desde hot√©is mais simples at√© os mais luxuosos. A regi√£o central √© a mais pr√°tica para turistas.`;
    }
    
    if (lowerPrompt.includes('passeio') || lowerPrompt.includes('atra√ß√£o') || lowerPrompt.includes('fazer')) {
      return `Campo Grande tem v√°rias atra√ß√µes interessantes! O Parque das Na√ß√µes Ind√≠genas √© um dos principais pontos, perfeito para caminhadas e contato com a natureza. O centro hist√≥rico tem pr√©dios bonitos para fotografar. Para quem gosta de cultura, h√° museus interessantes. E n√£o pode faltar experimentar a gastronomia local!`;
    }
    
    // Resposta gen√©rica mas √∫til
    return `Posso te ajudar com informa√ß√µes sobre Mato Grosso do Sul! O que voc√™ gostaria de saber especificamente sobre turismo, gastronomia, hospedagem ou atra√ß√µes?`;
  }

  /**
   * Gera resposta inteligente quando a resposta original √© muito gen√©rica
   */
  private generateIntelligentResponse(prompt: string, originalResponse: string): string {
    const lowerPrompt = prompt.toLowerCase();
    
    // Detectar tipo de pergunta e fornecer informa√ß√µes mais espec√≠ficas
    if (lowerPrompt.includes('campo grande') || lowerPrompt.includes('capital')) {
      return `Campo Grande √© a capital de Mato Grosso do Sul e tem muito a oferecer! A cidade √© conhecida por suas √°reas verdes, como o Parque das Na√ß√µes Ind√≠genas, que √© perfeito para caminhadas e contato com a natureza. O centro hist√≥rico tem pr√©dios interessantes e a gastronomia local √© incr√≠vel, com pratos t√≠picos como o sob√°. Para quem gosta de cultura, h√° museus e centros culturais. A cidade tem uma vibe tranquila mas moderna, ideal para quem quer conhecer o MS!`;
    }
    
    if (lowerPrompt.includes('hotel') || lowerPrompt.includes('hospedagem')) {
      return `Em Campo Grande voc√™ encontra boas op√ß√µes de hospedagem! A maioria dos hot√©is fica no centro ou pr√≥ximo ao centro da cidade, o que facilita o acesso aos principais pontos tur√≠sticos. H√° op√ß√µes para todos os bolsos, desde hot√©is mais simples at√© os mais luxuosos. A regi√£o central √© a mais pr√°tica para turistas.`;
    }
    
    if (lowerPrompt.includes('restaurante') || lowerPrompt.includes('comida')) {
      return `A gastronomia de Campo Grande √© uma experi√™ncia incr√≠vel! A cidade tem uma mistura interessante de sabores, com influ√™ncias da culin√°ria japonesa (como o sob√°) e pratos t√≠picos regionais. Voc√™ encontra desde restaurantes tradicionais at√© op√ß√µes mais modernas. A Feira Central √© um lugar imperd√≠vel para experimentar a culin√°ria local!`;
    }
    
    if (lowerPrompt.includes('passeio') || lowerPrompt.includes('atra√ß√£o') || lowerPrompt.includes('fazer')) {
      return `Campo Grande tem v√°rias atra√ß√µes interessantes! O Parque das Na√ß√µes Ind√≠genas √© um dos principais pontos, perfeito para caminhadas e contato com a natureza. O centro hist√≥rico tem pr√©dios bonitos para fotografar. Para quem gosta de cultura, h√° museus interessantes. E n√£o pode faltar experimentar a gastronomia local!`;
    }
    
    // Para outras perguntas, usar a resposta original mas melhorada
    return originalResponse.replace(
      /Para informa√ß√µes espec√≠ficas sobre isso, recomendo consultar fontes oficiais ou entrar em contato diretamente com os estabelecimentos de interesse\. Posso ajudar com informa√ß√µes gerais sobre turismo em Mato Grosso do Sul!/g,
      'Posso te ajudar com informa√ß√µes sobre Mato Grosso do Sul! O que voc√™ gostaria de saber especificamente?'
    );
  }

  /**
   * Gera resposta alternativa quando a verifica√ß√£o falha
   */
  private generateUncertainResponse(prompt: string, verificationResult: any): string {
    const lowerPrompt = prompt.toLowerCase();
    
    // Detectar tipo de pergunta e fornecer informa√ß√µes mais espec√≠ficas
    if (lowerPrompt.includes('hotel') || lowerPrompt.includes('hospedagem')) {
      return `Sobre hospedagem em Mato Grosso do Sul, recomendo consultar diretamente os sites oficiais de reservas como Booking.com, Airbnb ou os sites dos pr√≥prios hot√©is para informa√ß√µes atualizadas sobre disponibilidade e pre√ßos. Para Campo Grande, voc√™ pode encontrar boas op√ß√µes pr√≥ximas ao centro da cidade.`;
    }
    
    if (lowerPrompt.includes('restaurante') || lowerPrompt.includes('comida')) {
      return `Para restaurantes em Mato Grosso do Sul, especialmente em Campo Grande, recomendo consultar o TripAdvisor ou Google Maps para encontrar as melhores op√ß√µes com avalia√ß√µes atualizadas dos clientes. A cidade tem uma excelente gastronomia local!`;
    }
    
    if (lowerPrompt.includes('passeio') || lowerPrompt.includes('atra√ß√£o')) {
      return `Para informa√ß√µes sobre atra√ß√µes e passeios em Mato Grosso do Sul, recomendo consultar o site oficial da Fundtur-MS (fundtur.ms.gov.br) ou entrar em contato diretamente com as atra√ß√µes que voc√™ tem interesse em visitar.`;
    }
    
    // Para perguntas gerais sobre lugares, fornecer informa√ß√µes b√°sicas
    if (lowerPrompt.includes('campo grande') || lowerPrompt.includes('capital')) {
      return `Campo Grande √© a capital de Mato Grosso do Sul e oferece diversas atra√ß√µes como o Parque das Na√ß√µes Ind√≠genas, museus, gastronomia local e uma rica cultura. Para informa√ß√µes mais detalhadas, recomendo consultar o site oficial da Fundtur-MS.`;
    }
    
    // Resposta gen√©rica para outras perguntas
    return `Para informa√ß√µes espec√≠ficas sobre isso, recomendo consultar fontes oficiais ou entrar em contato diretamente com os estabelecimentos de interesse. Posso ajudar com informa√ß√µes gerais sobre turismo em Mato Grosso do Sul!`;
  }

  private extractInterests(prompt: string): string[] {
    const interests = [];
    const interestKeywords = [
      'ecoturismo', 'natureza', 'trilha', 'gruta', 'pantanal', 'bonito', 'campo grande',
      'cultura', 'hist√≥ria', 'gastronomia', 'aventura', 'relaxamento', 'fam√≠lia',
      'casal', 'amigos', 'fotografia', 'observa√ß√£o de aves', 'pesca', 'rafting'
    ];

    interestKeywords.forEach(keyword => {
      if (prompt.toLowerCase().includes(keyword)) {
        interests.push(keyword);
      }
    });

    return interests;
  }

  private extractLocation(prompt: string): string {
    const locations = ['bonito', 'campo grande', 'corumb√°', 'pantanal', 'ms', 'mato grosso do sul'];
    const foundLocation = locations.find(location => 
      prompt.toLowerCase().includes(location)
    );
    return foundLocation || 'Mato Grosso do Sul';
  }

  private extractDuration(prompt: string): number {
    const durationMatch = prompt.match(/(\d+)\s*(dia|dias)/i);
    if (durationMatch) {
      return parseInt(durationMatch[1]);
    }
    return 3; // Default 3 dias
  }

  private extractBudget(prompt: string): 'budget' | 'moderate' | 'luxury' {
    if (prompt.toLowerCase().includes('econ√¥mico') || prompt.toLowerCase().includes('barato')) {
      return 'budget';
    }
    if (prompt.toLowerCase().includes('luxo') || prompt.toLowerCase().includes('premium')) {
      return 'luxury';
    }
    return 'moderate';
  }

  /**
   * Limpa o thread ID atual, iniciando uma nova conversa
   */
  clearThread(): void {
    this.currentThreadId = null;
    // Resetar conversa tamb√©m
    this.currentConversation = {
      introduced: false,
      context: '',
      messages: []
    };
    console.log("ü¶¶ Guat√°: Nova conversa iniciada");
  }

  /**
   * Obt√©m o thread ID atual
   */
  getCurrentThreadId(): string | null {
    return this.currentThreadId;
  }

  /**
   * Define um thread ID espec√≠fico
   */
  setThreadId(threadId: string): void {
    this.currentThreadId = threadId;
    console.log("ü¶¶ Guat√°: Thread ID definido:", threadId);
  }
}

// Inst√¢ncia singleton do cliente
export const guataClient = new GuataClient();
 
