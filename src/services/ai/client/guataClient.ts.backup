import { supabase } from "@/integrations/supabase/client";
import { KnowledgeItem } from "../knowledge/knowledgeTypes";
import { GuataUserInfo, GuataResponse } from "../types/guataTypes";
import { geminiClient } from "@/config/gemini";
import { searchMSKnowledge, MSKnowledgeItem } from "../knowledge/msKnowledgeBase";
import { addPersonalityToPrompt, detectContext } from "../personality/guataPersonality";
import { webSearchService } from "../search/webSearchService";
import { socialMediaService } from "../social/socialMediaService";

/**
 * Cliente para comunica√ß√£o com a API do Guat√°
 */
export class GuataClient {
  private currentThreadId: string | null = null;
  private currentConversation: {
    introduced: boolean;
    context: string;
    messages: { role: 'user' | 'assistant', content: string }[];
  } = {
    introduced: false,
    context: '',
    messages: []
  };

  /**
   * Envia uma pergunta para a API Guat√° usando Gemini
   */
  async sendQuery(
    prompt: string,
    knowledgeBase?: KnowledgeItem[],
    userInfo?: GuataUserInfo
  ): Promise<GuataResponse> {
    try {
      console.log("ü¶¶ Guat√°: Iniciando chamada com Gemini API");
      
      // Preparar contexto da base de conhecimento
      let contextInfo = "";
      if (knowledgeBase?.length > 0) {
        contextInfo = knowledgeBase.map(item => `
T√≠tulo: ${item.title}
Categoria: ${item.category}
Conte√∫do: ${item.content}
${item.source ? `Fonte: ${item.source}` : ''}
---`).join('\n');
      }

      // Preparar informa√ß√µes do usu√°rio
      let userContext = "";
      if (userInfo) {
        userContext = `
Informa√ß√µes do usu√°rio:
${userInfo.nome ? `Nome: ${userInfo.nome}` : ''}
${userInfo.localizacao ? `Localiza√ß√£o: ${userInfo.localizacao}` : ''}
${userInfo.interesses ? `Interesses: ${userInfo.interesses.join(', ')}` : ''}
${userInfo.tipoViagem ? `Tipo de viagem: ${userInfo.tipoViagem}` : ''}
${userInfo.duracao ? `Dura√ß√£o: ${userInfo.duracao}` : ''}
${userInfo.orcamento ? `Or√ßamento: ${userInfo.orcamento}` : ''}
${userInfo.acessibilidade ? `Acessibilidade: ${userInfo.acessibilidade}` : ''}
${userInfo.idade ? `Idade: ${userInfo.idade}` : ''}
${userInfo.viajandoCom ? `Viajando com: ${userInfo.viajandoCom}` : ''}
---`;
      }

      // Buscar informa√ß√µes espec√≠ficas de MS
      const context = detectContext(prompt);
      const msKnowledge = searchMSKnowledge(prompt, context as any);
      
      let msContextInfo = "";
      if (msKnowledge.length > 0) {
        msContextInfo = `
INFORMA√á√ïES ESPEC√çFICAS DE MS (VERIFICADAS E ATUALIZADAS):
${msKnowledge.map(item => `
${item.category.toUpperCase()}: ${item.name}
Localiza√ß√£o: ${item.location}
Descri√ß√£o: ${item.description}
${item.contact ? `Contato: ${item.contact}` : ''}
${item.website ? `Website: ${item.website}` : ''}
${item.tripAdvisorRating ? `TripAdvisor: ${item.tripAdvisorRating}/5` : item.rating ? `Avalia√ß√£o: ${item.rating}/5` : ''}
${item.priceRange ? `Faixa de pre√ßo: ${item.priceRange}` : ''}
${item.specialties ? `Especialidades: ${item.specialties.join(', ')}` : ''}
${item.isPartner ? '‚≠ê PARCEIRO DA PLATAFORMA' : ''}
${item.cadasturCode ? `Cadastur: ${item.cadasturCode}` : ''}
---`).join('\n')}`;
      }

      // Buscar informa√ß√µes atualizadas da web
      let webContextInfo = "";
      try {
        const webResults = await webSearchService.search(prompt);
        if (webResults.length > 0) {
          webContextInfo = `
INFORMA√á√ïES ATUALIZADAS DA WEB (FONTES CONFI√ÅVEIS):
${webResults.slice(0, 3).map(result => `
FONTE: ${result.source?.name || 'Web'}
T√çTULO: ${result.title}
CONTE√öDO: ${result.content}
CONFIAN√áA: ${Math.round(result.confidence * 100)}%
CATEGORIA: ${result.category}
---`).join('\n')}`;
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Erro na busca web:', error);
      }

      // Buscar informa√ß√µes de redes sociais
      let socialContextInfo = "";
      try {
        const socialResults = await socialMediaService.getRecentPosts(prompt);
        if (socialResults.length > 0) {
          socialContextInfo = `
INFORMA√á√ïES DE REDES SOCIAIS OFICIAIS:
${socialResults.slice(0, 2).map(result => `
REDE SOCIAL: ${result.source?.name || 'Instagram'}
T√çTULO: ${result.title}
CONTE√öDO: ${result.content}
TIPO: ${result.category}
---`).join('\n')}`;
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Erro na busca de redes sociais:', error);
      }

      // Preparar contexto mantendo hist√≥rico
      let contextInfo = "";
      
      // Adicionar apresenta√ß√£o apenas na primeira mensagem
      if (!this.currentConversation.introduced) {
        contextInfo += `Voc√™ √© o Guat√°, guia especializado em Mato Grosso do Sul. Mantenha suas respostas naturais e evite repetir sua apresenta√ß√£o.`;
        this.currentConversation.introduced = true;
      } else {
        contextInfo += `Continue a conversa naturalmente, sem se reapresentar.`;
      }

      // Adicionar hist√≥rico da conversa
      if (this.currentConversation.messages.length > 0) {
        contextInfo += "\n\nHist√≥rico da conversa:\n" + 
          this.currentConversation.messages.map(m => 
            `${m.role === 'user' ? 'Visitante' : 'Guat√°'}: ${m.content}`
          ).join('\n');
      }

      // Montar prompt completo com personalidade
      const basePrompt = `
Contexto sobre MS:
${contextInfo}

${msContextInfo}

${webContextInfo}

${socialContextInfo}

Informa√ß√µes do usu√°rio:
${userContext}

Pergunta do usu√°rio: ${prompt}

IMPORTANTE: 
- Use apenas informa√ß√µes verificadas e atualizadas
- Se mencionar atra√ß√µes ou servi√ßos, confirme se ainda existem
- Priorize fontes oficiais e confi√°veis
- Se n√£o tiver certeza sobre algo, seja honesto e sugira verificar diretamente
- Responda de forma amig√°vel e natural, usando o conhecimento fornecido sobre MS
- Se n√£o tiver informa√ß√µes espec√≠ficas, seja honesto e sugira alternativas ou indique onde encontrar a informa√ß√£o.`;

      const fullPrompt = addPersonalityToPrompt(basePrompt);

      console.log("ü¶¶ Guat√°: Prompt preparado, chamando Gemini API...");

      // Usar Gemini API diretamente
      const response = await geminiClient.generateContent(fullPrompt);
      
      if (!response.ok) {
        throw new Error(`Erro na Gemini API: ${response.error}`);
      }

      console.log("ü¶¶ Guat√°: Resposta recebida com sucesso");

      // Limpar formata√ß√£o da resposta
      const cleanedResponse = this.cleanResponse(response.text);

      // Salvar mensagem no hist√≥rico
      this.currentConversation.messages.push(
        { role: 'user', content: prompt },
        { role: 'assistant', content: cleanedResponse }
      );

      // Limitar tamanho do hist√≥rico
      if (this.currentConversation.messages.length > 10) {
        this.currentConversation.messages = this.currentConversation.messages.slice(-10);
      }

      return {
        resposta: cleanedResponse,
        response: cleanedResponse
      };

    } catch (error) {
      console.error("ü¶¶ Guat√°: Erro ao processar pergunta:", error);
      
      return {
        resposta: "Desculpe, estou com dificuldades t√©cnicas no momento. Por favor, tente novamente em alguns instantes. Se o problema persistir, voc√™ pode entrar em contato com nosso suporte.",
        response: "Desculpe, estou com dificuldades t√©cnicas no momento. Por favor, tente novamente em alguns instantes. Se o problema persistir, voc√™ pode entrar em contato com nosso suporte.",
        erro: error instanceof Error ? error.message : "Erro desconhecido"
      };
    }
  }

  /**
   * Limpa formata√ß√£o da resposta removendo marcadores ** e excesso de quebras
   */
  private cleanResponse(text: string): string {
    return text
      .replace(/\*\*/g, '') // Remove marcadores **
      .replace(/\n{3,}/g, '\n\n') // Remove excesso de quebras de linha
      .trim();
  }

  /**
   * Limpa o thread ID atual, iniciando uma nova conversa
   */
  clearThread(): void {
    this.currentThreadId = null;
    // Resetar conversa tamb√©m
    this.currentConversation = {
      introduced: false,
      context: '',
      messages: []
    };
    console.log("ü¶¶ Guat√°: Nova conversa iniciada");
  }

  /**
   * Obt√©m o thread ID atual
   */
  getCurrentThreadId(): string | null {
    return this.currentThreadId;
  }

  /**
   * Define um thread ID espec√≠fico
   */
  setThreadId(threadId: string): void {
    this.currentThreadId = threadId;
    console.log("ü¶¶ Guat√°: Thread ID definido:", threadId);
  }
}

// Inst√¢ncia singleton do cliente
export const guataClient = new GuataClient();